/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Functionality/Dom.js":
/*!**********************************!*\
  !*** ./src/Functionality/Dom.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Player */ \"./src/Functionality/Player.js\");\n\n\nconst rice = 'Mans'\nconst enemyWaters = document.querySelector('.enemy-waters');\nconst allyWaters = document.querySelector('.allied-waters');\nconst shipZone = document.querySelector('.ship-zone');\nconst shipBlocks = document.querySelector('.ship-block');\nconst restartBtn = document.querySelector('.restart-btn');\nconst rotateBtn = document.querySelector('.rotate-btn');\nconst player = (0,_Player__WEBPACK_IMPORTED_MODULE_0__[\"default\"])()\nconst array = [];\nlet shipArray = [\n    {name: 'Carrier', length: 5},\n    {name: 'Battle Ship', length: 4},\n    {name: 'Destroyer', length: 3},\n    {name: 'Submarine', length: 3},\n    {name: 'Patrol Boat', length: 2}\n]\nlet shipCopy = []\n\nconst loadGridBlocks = () => {\n    for (let i = 0; i < 100; i++) {\n        const enemyDivs = document.createElement('div');\n        const allyDivs = document.createElement('div');\n        const shipDivs = document.createElement('div');\n\n        enemyDivs.classList.add('grid-cell')\n        enemyDivs.classList.add('grid-enemy')\n\n        enemyDivs.addEventListener('mouseover', hoverGridCell)\n        enemyDivs.addEventListener('click', clickGridCell)\n        enemyDivs.addEventListener('mouseout', hoverOutGridCell)\n        shipDivs.addEventListener('mouseover', hoverShipPlacements)\n        shipDivs.addEventListener('mouseout', hoverOutShipPlacements)\n        shipDivs.addEventListener('click', clickShipPlacement);\n        \n        enemyWaters.append(enemyDivs)\n        allyDivs.classList.add('grid-ally');\n        allyWaters.append(allyDivs);\n        enemyDivs.style.cursor = 'pointer'\n        shipZone.append(shipDivs)\n        shipDivs.classList.add('grid-ships')\n        shipBlocks.style.visibility = 'unset'\n        shipZone.append(shipBlocks)\n\n        enemyDivs.dataset.row = Number(getGridPosition(enemyWaters, getElementIndex(enemyDivs)).row);\n        enemyDivs.dataset.column = Number(getGridPosition(enemyWaters, getElementIndex(enemyDivs)).column);\n        allyDivs.dataset.row = Number(getGridPosition(allyWaters, getElementIndex(allyDivs)).row);\n        allyDivs.dataset.column = Number(getGridPosition(allyWaters, getElementIndex(allyDivs)).column);\n        shipDivs.dataset.row = Number(getGridPosition(shipZone, getElementIndex(shipDivs)).row);\n        shipDivs.dataset.column = Number(getGridPosition(shipZone, getElementIndex(shipDivs)).column);\n        allyDivs.dataset.shot = false;\n    }\n    restartBtn.addEventListener('click', restartBoard)\n    rotateBtn.addEventListener('click', rotateShip)\n}\n\nconst rotateShip = event => {\n    if (event.target.id == 'Horizontal') {\n        event.target.id = 'Vertical'\n        shipBlocks.style.gridTemplateColumns = 'none'\n        shipBlocks.lastElementChild.style.borderBottom = 'transparent'\n\n        for (let i = 0; i < shipBlocks.children.length; i++) {\n            shipBlocks.children[i].classList.toggle('grid-styles')\n            shipBlocks.children[i].classList.toggle('grid-vertical')\n            if (shipArray[0].name == 'Carrier') {\n                shipBlocks.style.gridTemplateRows = `repeat(5, 1fr)`\n                shipBlocks.style.width = 39 + 'px'\n                shipBlocks.style.height = 184 + 'px'\n            } else if (shipArray[0].name == 'Battle Ship') {\n                shipBlocks.style.gridTemplateRows = `repeat(4, 1fr)`\n                shipBlocks.style.width = 39 + 'px'\n                shipBlocks.style.height = 147 + 'px'\n            } else if (shipArray[0].name == 'Submarine') {\n                shipBlocks.style.gridTemplateRows = `repeat(3, 1fr)`\n                shipBlocks.style.width = 39 + 'px'\n                shipBlocks.style.height = 110 + 'px'\n            } else if (shipArray[0].name == 'Destroyer') {\n                shipBlocks.style.gridTemplateRows = `repeat(3, 1fr)`\n                shipBlocks.style.width = 39 + 'px'\n                shipBlocks.style.height = 110 + 'px'\n            } else if (shipArray[0].name == 'Patrol Boat') {\n                shipBlocks.style.gridTemplateRows = `repeat(2, 1fr)`\n                shipBlocks.style.width = 39 + 'px'\n                shipBlocks.style.height = 74 + 'px'\n            }\n        }\n    }\n    else {\n        event.target.id = 'Horizontal'\n        shipBlocks.style.gridTemplateRows = 'none'\n        shipBlocks.lastElementChild.style.borderRight = 'transparent'\n\n        for (let i = 0; i < shipBlocks.children.length; i++) {\n            shipBlocks.children[i].classList.toggle('grid-vertical')\n            shipBlocks.children[i].classList.toggle('grid-styles')\n\n            if (shipArray[0].name == 'Carrier') {\n                shipBlocks.style.gridTemplateColumns = `repeat(5, 1fr)`\n                shipBlocks.style.height = 36 + 'px'\n                shipBlocks.style.width = 198 + 'px'\n            } else if (shipArray[0].name == 'Battle Ship') {\n                shipBlocks.style.height = 36 + 'px'\n                shipBlocks.style.width = 158 + 'px'\n                shipBlocks.style.gridTemplateColumns = `repeat(4, 1fr)`\n                // shipBlocks.style.height = (shipBlocks.offsetHeight - 37) + 'px'\n            } else if (shipArray[0].name == 'Destroyer') {\n                shipBlocks.style.gridTemplateColumns = `repeat(3, 1fr)`\n                shipBlocks.style.height = 36 + 'px'\n                shipBlocks.style.width = 119 + 'px'\n            } else if (shipArray[0].name == 'Submarine') {\n                shipBlocks.style.gridTemplateColumns = `repeat(3, 1fr)`\n                shipBlocks.style.height = 36 + 'px'\n                shipBlocks.style.width = 119 + 'px'\n                // shipBlocks.style.height = (shipBlocks.offsetHeight - 37) + 'px'\n            } else if (shipArray[0].name == 'Patrol Boat') {\n                shipBlocks.style.gridTemplateColumns = `repeat(2, 1fr)`\n                shipBlocks.style.height = 36 + 'px'\n                shipBlocks.style.width = 79 + 'px'\n            }\n        }\n    }\n}\n\nconst hoverShipPlacements = event => {\n    let nextInnerGridCell = event.target.nextElementSibling\n    let upper = 0;\n\n    shipBlocks.style.display = 'grid'\n    shipBlocks.style.left = (event.target.offsetLeft) + 'px'\n    shipBlocks.style.top = (event.target.offsetTop) + 'px'\n    \n    if (rotateBtn.id == 'Horizontal') {\n        for (let i = 0; i < shipBlocks.children.length; i++) {\n            while (upper != shipArray[0].length && nextInnerGridCell) { // CHANGE THIS TO A UNIVERSAL SHIP LENGTH\n                if (shipBlocks.children[upper] && event.target.dataset.row == nextInnerGridCell.dataset.row ) shipBlocks.children[upper].dataset.column = nextInnerGridCell.dataset.column - 1 \n                else if (shipBlocks.lastElementChild.previousElementSibling.dataset.column == 8) shipBlocks.lastElementChild.dataset.column = 9;\n\n                upper++\n                nextInnerGridCell = nextInnerGridCell.nextElementSibling\n            }\n            if (!shipBlocks.children[i].dataset.row) shipBlocks.children[i].dataset.row = event.target.dataset.row\n            else shipBlocks.children[i].dataset.row = event.target.dataset.row\n            if (shipBlocks.children[0].dataset.column && event.target.dataset.row == shipBlocks.children[i].dataset.row) shipBlocks.children[0].dataset.column = event.target.dataset.column\n        }\n    } else {\n        for (let i = 0; i < shipBlocks.children.length; i++) {\n            while (upper != shipArray[0].length ) {\n                // shipBlocks.children[upper].dataset.row = event.target.dataset.row\n                if (shipBlocks.children[upper] && event.target.dataset.column == shipBlocks.children[upper].dataset.column\n                ) shipBlocks.children[upper].dataset.row = Number(event.target.dataset.row ) + upper\n                else if (shipBlocks.lastElementChild.previousElementSibling.dataset.row == 8) shipBlocks.lastElementChild.dataset.row = 9\n\n                upper++\n            }\n            if (!shipBlocks.children[i].dataset.column) shipBlocks.children[i].dataset.column = event.target.dataset.column\n            else shipBlocks.children[i].dataset.column = event.target.dataset.column\n            if (shipBlocks.children[0].dataset.row && event.target.dataset.column == shipBlocks.children[i].dataset.column) shipBlocks.children[0].dataset.row = event.target.dataset.row\n        }\n    }\n}\n\nconst hoverOutShipPlacements = () => {\n    shipBlocks.style.display = 'none'\n}\n\nconst placeComputerShips = () => {\n    const direction = ['Horizontal', 'Vertical']\n    const randomView = Math.floor(Math.random() * direction.length)\n    const random = player.computer.board[Math.floor(Math.random() * player.computer.board.length)]\n    \n    if (direction[randomView] == 'Horizontal') {\n        // console.log('GET RANDOM', random, random[1] + 1)\n        if (random.length == 3) {\n            placeComputerShips()\n            return\n        }\n        for (let k = 0; k < player.computer.board.length; k++) {\n            for (let cols = 0; cols < shipArray[0].length; cols++) {\n                if (player.computer.board[k - 1] && player.computer.board[k - 1][0] == random[0] && player.computer.board[k - 1][1] == random[1] - 1 && player.computer.board[k - 1][2] ) {\n                    placeComputerShips()\n                    return\n                }\n                if (player.computer.board[k + cols + 1] && player.computer.board[k + cols + 1][0] == random[0] && player.computer.board[k + cols + 1][1] == random[1] + cols + 1 && player.computer.board[k + cols + 1][2]) {\n                    placeComputerShips()\n                    return\n                }\n            }\n        }\n        console.log('BOARD', player.computer.board)\n        for (let i = 0; i < enemyWaters.children.length; i++) {\n            for (let k = 0; k < player.computer.board.length; k++) {\n                // for (let col = 0; col < shipArray[0].length; col++) { \n                    if (random[1] > 5 && shipArray[0].name == 'Carrier') {  \n                        random.length = 2\n                        placeComputerShips()\n                        \n                        return player.computer.board\n                    } else  if (shipArray[0].name == 'Carrier'){\n                        \n                        player.computer.placeShips(shipArray[0].name, shipArray[0].length, [random[0], random[1]], 'Horizontal') \n                    }\n                    // player.human.placeShips(shipArray[0].name, shipArray[0].length, [event.target.dataset.row, event.target.dataset.column], 'Horizontal')\n                    if (random[1] > 6 && shipArray[0].name == 'Battle Ship') {\n                        random.length = 2\n                        placeComputerShips()\n                        \n                        console.log('INNER BATTLE TEST')\n                        return player.computer.board\n                    }  else if (shipArray[0].name == 'Battle Ship')  {\n                        \n                        player.computer.placeShips(shipArray[0].name, shipArray[0].length, [random[0], random[1]], 'Horizontal') \n                    }   \n                    \n                    if (random[1] > 7 && shipArray[0].name == 'Destroyer') {\n                        random.length = 2\n                        placeComputerShips()\n                        \n                        console.log('INNER DESTROYER TEST')\n                        return player.computer.board\n                    }  else if (shipArray[0].name == 'Destroyer') {\n                        \n                        player.computer.placeShips(shipArray[0].name, shipArray[0].length, [random[0], random[1]], 'Horizontal') \n                    }   \n                    \n                    if (random[1] > 7 && shipArray[0].name == 'Submarine') {\n                        random.length = 2\n                        placeComputerShips()\n                        \n                        console.log('INNER SUB TEST')\n                        return player.computer.board\n                    }  else if (shipArray[0].name == 'Submarine') {\n                        \n                        player.computer.placeShips(shipArray[0].name, shipArray[0].length, [random[0], random[1]], 'Horizontal') \n                    }   \n                    \n                    if (random[1] > 8 && shipArray[0].name == 'Patrol Boat') {\n                        random.length = 2\n                        placeComputerShips()\n                        \n                        console.log('INNER PATROL TEST')\n                        return player.computer.board\n                    } else  if (shipArray[0].name == 'Patrol Boat'){\n                        \n                        player.computer.placeShips(shipArray[0].name, shipArray[0].length, [random[0], random[1]], 'Horizontal') \n                    }   \n                // }\n                for (let row = 0; row < shipArray[0].length; row++) {\n                    if (enemyWaters.children[i].dataset.row == random[0] && enemyWaters.children[i].dataset.column == random[1]\n                    && random[2] ) {\n                        switch (shipArray[0].name) {\n                            case 'Carrier':\n                                for (let j = 9; j < 16; j++) {\n                                    if (enemyWaters.children[i + j] ) enemyWaters.children[i + j].dataset.outer = 'Outer'\n                                    if (player.computer.board[k + j] && player.computer.board[k][0] == random[0] && player.computer.board[k][1] == random[1]) {\n                                        player.computer.board[k + j][2] = {outer: `Outer`}\n                                    }\n                                }\n                                for (let j = 11; j > 4; j--) {\n                                    if (enemyWaters.children[i - j]) enemyWaters.children[i - j].dataset.outer = 'Outer'\n                                    if (player.computer.board[k - j] && player.computer.board[k][0] == random[0] && player.computer.board[k][1] == random[1]) {\n                                        player.computer.board[k - j][2] = {outer: `Outer`}\n                                    }\n                                }\n                                break;\n                            case 'Battle Ship': \n                                for (let j = 9; j < 15; j++) {\n                                    if (enemyWaters.children[i + j]  ) enemyWaters.children[i + j].dataset.outer = 'Outer'\n                                    if (player.computer.board[k + j] && player.computer.board[k][0] == random[0] && player.computer.board[k][1] == random[1]) {\n                                        player.computer.board[k + j][2] = {outer: `Outer`}\n                                    }\n                                }\n                                for (let j = 11; j > 5; j--) {\n                                    if (enemyWaters.children[i - j] ) enemyWaters.children[i - j].dataset.outer = 'Outer'\n                                    if (player.computer.board[k - j] && player.computer.board[k][0] == random[0] && player.computer.board[k][1] == random[1]) {\n                                        player.computer.board[k - j][2] = {outer: `Outer`}\n                                    }\n                                }\n                                break;\n                            case 'Destroyer':\n                                for (let j = 9; j < 14; j++) {\n                                    if (enemyWaters.children[i + j]  ) enemyWaters.children[i + j].dataset.outer = 'Outer'\n                                    if (player.computer.board[k + j] && player.computer.board[k][0] == random[0] && player.computer.board[k][1] == random[1]) {\n                                        player.computer.board[k + j][2] = {outer: `Outer`}\n                                    }\n                                }\n                                for (let j = 11; j > 6; j--) {\n                                    if (enemyWaters.children[i - j]) enemyWaters.children[i - j].dataset.outer = 'Outer'\n                                    if (player.computer.board[k - j] && player.computer.board[k][0] == random[0] && player.computer.board[k][1] == random[1]) {\n                                        player.computer.board[k - j][2] = {outer: `Outer`}\n                                    }\n                                }\n                                break;\n                            case 'Submarine':\n                                for (let j = 9; j < 14; j++) {\n                                    if (enemyWaters.children[i + j]  ) enemyWaters.children[i + j].dataset.outer = 'Outer'\n                                    if (player.computer.board[k + j] && player.computer.board[k][0] == random[0] && player.computer.board[k][1] == random[1]) {\n                                        player.computer.board[k + j][2] = {outer: `Outer`}\n                                    }\n                                }\n                                for (let j = 11; j > 6; j--) {\n                                    if (enemyWaters.children[i - j]) enemyWaters.children[i - j].dataset.outer = 'Outer'\n                                    if (player.computer.board[k - j] && player.computer.board[k][0] == random[0] && player.computer.board[k][1] == random[1]) {\n                                        player.computer.board[k - j][2] = {outer: `Outer`}\n                                    }\n                                }\n                                break;\n                            case 'Patrol Boat':\n                                for (let j = 9; j < 13; j++) {\n                                    \n                                    if (enemyWaters.children[i + j]  ) enemyWaters.children[i + j].dataset.outer = 'Outer'\n                                    if (player.computer.board[k + j] && player.computer.board[k][0] == random[0] && player.computer.board[k][1] == random[1]) {\n                                        player.computer.board[k + j][2] = {outer: `Outer`}\n                                    }\n                                }\n                                for (let j = 11; j > 7; j--) {\n                                    \n                                    if (enemyWaters.children[i - j]) enemyWaters.children[i - j].dataset.outer = 'Outer'\n                                    if (player.computer.board[k - j] && player.computer.board[k][0] == random[0] && player.computer.board[k][1] == random[1]) {\n                                        player.computer.board[k - j][2] = {outer: `Outer`}\n                                    }\n                                }\n                            break;\n                        }\n                        if (enemyWaters.children[i - 1] && enemyWaters.children[i - 1].dataset.column != 9) enemyWaters.children[i - 1].dataset.outer = 'Outer'\n                        if (player.computer.board[k - 1] && player.computer.board[k - 1][0] == random[0] && player.computer.board[k - 1][1] == random[1] - 1 && player.computer.board[k - 1][1] != 9) player.computer.board[k - 1][2] = {outer: 'OUTER'}\n                        if (enemyWaters.children[i + row + 1] && enemyWaters.children[i + row + 1].dataset.column != 0) enemyWaters.children[i + row + 1].dataset.outer = 'Outer'\n                        if (player.computer.board[k + row + 1] && player.computer.board[k + row + 1][0] == random[0] && player.computer.board[k + row + 1][1] == random[1] + row + 1 && player.computer.board[k + row + 1][1] != 0) player.computer.board[k + row + 1][2] = {outer: 'OUTER'}\n                        \n                        // enemyWaters.children[i + row].style.background = 'red'\n                        enemyWaters.children[i + row].dataset.ship = shipArray[0].name\n                        enemyWaters.children[i + row].dataset.shot = false\n                    }\n                }\n            }\n        }\n    } else {\n        // console.log('G RAND', random)\n        if (random.length == 3) {\n            placeComputerShips()\n            return\n        }\n\n        for (let row = 0; row < player.computer.board.length; row++) {\n            for (let cols = 10; cols <= shipArray[0].length * 10; cols += 10) {\n                if (player.computer.board[row - 1] && player.computer.board[row - 1][0] == random[0] && player.computer.board[row - 1][1] == random[1] - 1 && player.computer.board[row - 1][2]) {\n                    console.log('first TEST')\n                    placeComputerShips()\n                    return\n                }\n\n                if (player.computer.board[row + 10] && player.computer.board[row + 10 ][0] == random[0] + 10  && player.computer.board[row + 10 ][1] == random[1] && player.computer.board[row + 10 ][2]) {\n                    console.log('TEST')\n                    placeComputerShips()\n                    return\n                }\n\n                if (player.computer.board[row + cols] && player.computer.board[row][0] == random[0] && player.computer.board[row][1] == random[1]\n                && player.computer.board[row + cols][1] == random[1] && player.computer.board[row + cols][2]) {\n                    console.log('DOWN TEST')\n                    placeComputerShips()\n                    return\n                }\n            }\n        }\n        console.log('COLUMN COMP', player.computer.board)\n        for (let i = 0; i < enemyWaters.children.length; i++) {\n            for (let row = 0; row < player.computer.board.length; row++) {\n                if (random[0] > 5 && shipArray[0].name == 'Carrier') {\n                    random.length = 2\n                    placeComputerShips()\n                    \n                    return player.computer.board\n                } else player.computer.placeShips(shipArray[0].name, shipArray[0].length, [random[0], random[1]], 'Vertical')           \n                \n                if (random[0] > 6 && shipArray[0].name == 'Battle Ship') {\n                    random.length = 2\n                    placeComputerShips()\n                    \n                    return player.computer.board\n                } else player.computer.placeShips(shipArray[0].name, shipArray[0].length, [random[0], random[1]], 'Vertical') \n                \n                if (random[0] > 7 && shipArray[0].name == 'Destroyer') {\n                    random.length = 2\n                    placeComputerShips()\n                    \n                    return player.computer.board\n                } else player.computer.placeShips(shipArray[0].name, shipArray[0].length, [random[0], random[1]], 'Vertical') \n                \n                if (random[0] > 7 && shipArray[0].name == 'Submarine') {\n                    random.length = 2\n                    placeComputerShips()\n                    \n                    return player.computer.board\n                } else player.computer.placeShips(shipArray[0].name, shipArray[0].length, [random[0], random[1]], 'Vertical') \n                \n                if (random[0] > 8 && shipArray[0].name == 'Patrol Boat') {\n                    random.length = 2\n                    placeComputerShips()\n                    \n                    return player.computer.board\n                } else player.computer.placeShips(shipArray[0].name, shipArray[0].length, [random[0], random[1]], 'Vertical') \n                \n                for (let index = 0; index <= shipArray[0].length + 1; index++) {\n                    if (player.computer.board[row + 1] && player.computer.board[row + index] && player.computer.board[row + index][0] == random[0] + index && player.computer.board[row][1] == random[1]) player.computer.board[row + 1][2] = {outer: 'OUTER'}\n                    if (player.computer.board[row - 1] && player.computer.board[row + index] && player.computer.board[row + index][0] == random[0] + index && player.computer.board[row][1] == random[1]) player.computer.board[row - 1][2] = {outer: 'OUTER'}\n                }\n                for (let column = 10; column < shipArray[0].length * 10; column += 10) {\n                    if (player.computer.board[row + column] && player.computer.board[row + column][0] == random[0] + 1 && player.computer.board[row][1] == random[1]\n                    && player.computer.board[row + column][1] == random[1]) {\n                        // console.log('RING', player.computer.board[row + column + shipArray[0].length * 10 - 10])\n                        if (player.computer.board[row + column + shipArray[0].length * 10 - 10]) player.computer.board[row + column + shipArray[0].length * 10 - 10][2] = {outer: 'OUTER'}\n                    }\n                }\n                \n                if (player.computer.board[row - 11] && player.computer.board[row - 11][0] == random[0] - 1 && player.computer.board[row - 11][1] == random[1] - 1) player.computer.board[row - 11][2] = {outer: 'OUTER'}\n                if (player.computer.board[row - 9] && player.computer.board[row - 9][0] == random[0] - 1 && player.computer.board[row - 9][1] == random[1] + 1) player.computer.board[row - 9][2] = {outer: 'OUTER'}\n                if (player.computer.board[row - 10] && player.computer.board[row - 10][0] == random[0] - 1 && player.computer.board[row][1] == random[1]) player.computer.board[row - 10][2] = {outer: 'OUTER'}\n                \n                if (enemyWaters.children[i].dataset.row == random[0] && enemyWaters.children[i].dataset.column == random[1]\n                && random[2]) {\n                    // if (enemyWaters.children[i].style.background == 'red' || enemyWaters.children[i].style.background == 'purple') {\n                    //     console.log('RANDOM WAS TAKEN')\n                    //     placeComputerShips()\n                    //     return player.computer.board\n                    // }\n                    \n                    // enemyWaters.children[i].style.background = 'red'\n\n                    if (enemyWaters.children[i + 1]) enemyWaters.children[i + 1].dataset.outer = 'Outer'\n                    if (enemyWaters.children[i + 1]) enemyWaters.children[i + 1].dataset.outer = 'Outer'\n                    if (enemyWaters.children[i - 1]) enemyWaters.children[i - 1].dataset.outer = 'Outer'\n                    if (enemyWaters.children[i - 10]) enemyWaters.children[i - 10].dataset.outer = 'Outer'\n                    if (enemyWaters.children[i - 11]) enemyWaters.children[i - 11].dataset.outer = 'Outer'\n                    if (enemyWaters.children[i - 9]) enemyWaters.children[i - 9].dataset.outer = 'Outer'\n\n                    enemyWaters.children[i].dataset.shot = false;\n                    enemyWaters.children[i].dataset.ship = shipArray[0].name\n                    \n                    // enemyWaters.children[i += 10].dataset.ship = shipArray[0].name \n                    if (enemyWaters.children[i].dataset.ship == 'Carrier') {\n                        for (let col = 0; col < 4; col++) {\n                            enemyWaters.children[i += 10].dataset.ship = shipArray[0].name\n                            // enemyWaters.children[i].style.background = 'red'\n                            enemyWaters.children[i].dataset.shot = false\n\n                            if (enemyWaters.children[i + 10] && enemyWaters.children[i + 10].dataset.column == random[1]) enemyWaters.children[i + 10].dataset.outer = 'Outer'\n                            if (enemyWaters.children[i + 1] ) enemyWaters.children[i + 1].dataset.outer = 'Outer'\n                            if (enemyWaters.children[i - 1]) enemyWaters.children[i - 1].dataset.outer = 'Outer'\n                            if (enemyWaters.children[i + 11]) enemyWaters.children[i + 11].dataset.outer = 'Outer'\n                            if (enemyWaters.children[i + 9]) enemyWaters.children[i + 9].dataset.outer = 'Outer'\n                        }\n                    } else if (enemyWaters.children[i].dataset.ship == 'Battle Ship') {\n                        for (let col = 0; col < 3; col++) {\n                            enemyWaters.children[i += 10].dataset.ship = shipArray[0].name\n                            // enemyWaters.children[i].style.background = 'red'\n                            enemyWaters.children[i].dataset.shot = false\n                            \n                            if (enemyWaters.children[i + 10] && enemyWaters.children[i + 10].dataset.column == random[1]) enemyWaters.children[i + 10].dataset.outer = 'Outer'\n                            if (enemyWaters.children[i + 1] ) enemyWaters.children[i + 1].dataset.outer = 'Outer'\n                            if (enemyWaters.children[i - 1]) enemyWaters.children[i - 1].dataset.outer = 'Outer'\n                            if (enemyWaters.children[i + 11]) enemyWaters.children[i + 11].dataset.outer = 'Outer'\n                            if (enemyWaters.children[i + 9]) enemyWaters.children[i + 9].dataset.outer = 'Outer'\n                        }\n                    } else if (enemyWaters.children[i].dataset.ship == 'Destroyer') {\n                        for (let col = 0; col < 2; col++) {\n                            enemyWaters.children[i += 10].dataset.ship = shipArray[0].name\n                            // enemyWaters.children[i].style.background = 'red'\n                            enemyWaters.children[i].dataset.shot = false\n                            \n                            if (enemyWaters.children[i + 10] && enemyWaters.children[i + 10].dataset.column == random[1]) enemyWaters.children[i + 10].dataset.outer = 'Outer'\n                            if (enemyWaters.children[i + 1] ) enemyWaters.children[i + 1].dataset.outer = 'Outer'\n                            if (enemyWaters.children[i - 1]) enemyWaters.children[i - 1].dataset.outer = 'Outer'\n                            if (enemyWaters.children[i + 11]) enemyWaters.children[i + 11].dataset.outer = 'Outer'\n                            if (enemyWaters.children[i + 9]) enemyWaters.children[i + 9].dataset.outer = 'Outer'\n                        }\n                    } else if (enemyWaters.children[i].dataset.ship == 'Submarine') {\n                        for (let col = 0; col < 2; col++) {\n                            enemyWaters.children[i += 10].dataset.ship = shipArray[0].name\n                            // enemyWaters.children[i].style.background = 'red'\n                            enemyWaters.children[i].dataset.shot = false\n                            \n                            if (enemyWaters.children[i + 10] && enemyWaters.children[i + 10].dataset.column == random[1]) enemyWaters.children[i + 10].dataset.outer = 'Outer'\n                            if (enemyWaters.children[i + 1] ) enemyWaters.children[i + 1].dataset.outer = 'Outer'\n                            if (enemyWaters.children[i - 1]) enemyWaters.children[i - 1].dataset.outer = 'Outer'\n                            if (enemyWaters.children[i + 11]) enemyWaters.children[i + 11].dataset.outer = 'Outer'\n                            if (enemyWaters.children[i + 9]) enemyWaters.children[i + 9].dataset.outer = 'Outer'\n                        }\n                    } else if (enemyWaters.children[i].dataset.ship == 'Patrol Boat') {\n                        for (let col = 0; col < 1; col++) {\n                            enemyWaters.children[i += 10].dataset.ship = shipArray[0].name\n                            // enemyWaters.children[i].style.background = 'red'\n                            enemyWaters.children[i].dataset.shot = false\n                            \n                            if (enemyWaters.children[i + 10] && enemyWaters.children[i + 10].dataset.column == random[1]) enemyWaters.children[i + 10].dataset.outer = 'Outer'\n                            if (enemyWaters.children[i + 1] ) enemyWaters.children[i + 1].dataset.outer = 'Outer'\n                            if (enemyWaters.children[i - 1]) enemyWaters.children[i - 1].dataset.outer = 'Outer'\n                            if (enemyWaters.children[i + 11]) enemyWaters.children[i + 11].dataset.outer = 'Outer'\n                            if (enemyWaters.children[i + 9]) enemyWaters.children[i + 9].dataset.outer = 'Outer'\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return player.computer.board\n}\nlet firstChild = 2;\nlet secondChild = 3;\n\nconst clickShipPlacement = event => {\n    let nextSibling = event.target.nextElementSibling\n    let upper = 0;\n    let numberIndex = 1;\n    // CHANGE PURPLE BACKGROUNDS INTO A DATASET OF SHIP\n    if (event.target.style.background == 'purple' || event.target.style.background == 'black') return \n\n    if (rotateBtn.id == 'Horizontal') {\n        if (shipBlocks.children[firstChild].dataset.column == shipBlocks.children[secondChild].dataset.column\n        || shipBlocks.children[firstChild].dataset.column > shipBlocks.children[secondChild].dataset.column) return\n        // if (shipBlocks.children[0].dataset.column > shipBlocks.children[1].dataset.column) return\n        while (nextSibling && numberIndex !== shipArray[0].length) {\n            if (nextSibling.style.background == 'purple') return\n            \n            numberIndex++\n            nextSibling = nextSibling.nextElementSibling\n        }\n    } else {\n        if (shipBlocks.lastElementChild.dataset.row > 9) return\n\n        // while (upper != shipArray[0].length) {\n        //     if (shipBlocks.children[upper].style.background == 'purple') return\n\n        //     upper++\n        // }\n\n        for (let i = 0; i < shipZone.children.length; i++) {\n            if (shipBlocks.lastElementChild.dataset.row == shipZone.children[i].dataset.row \n            && shipBlocks.lastElementChild.dataset.column == shipZone.children[i].dataset.column\n            && shipZone.children[i].style.background == 'purple') return\n        }\n    }\n    \n    if (firstChild > 0) firstChild--\n    if (secondChild > 1) secondChild--\n\n    if (rotateBtn.id == 'Horizontal') player.human.placeShips(shipArray[0].name, shipArray[0].length, [event.target.dataset.row, event.target.dataset.column], 'Horizontal')\n    else player.human.placeShips(shipArray[0].name, shipArray[0].length, [event.target.dataset.row, event.target.dataset.column], 'Vertical')\n    placeComputerShips()\n\n    for (let i = 0; i < allyWaters.children.length; i++) {\n        for (let j = 0; j < shipBlocks.children.length; j++) {\n            for (let k = 0; k < player.human.board.length; k++) {\n                if (allyWaters.children[i].dataset.row == shipBlocks.children[j].dataset.row \n                && allyWaters.children[i].dataset.column == shipBlocks.children[j].dataset.column) {\n                    allyWaters.children[i].style.background = 'black'\n                    allyWaters.children[i].dataset.ship = shipArray[0].name\n                }\n            }\n            for (let g = 0; g < shipZone.children.length; g++) {\n                if (shipBlocks.children[j].dataset.row == shipZone.children[g].dataset.row &&\n                shipBlocks.children[j].dataset.column == shipZone.children[g].dataset.column)  {\n                    event.target.style.background = 'black'\n                    shipZone.children[g].style.background = 'black'\n                    shipZone.children[g].dataset.ship = shipArray[0].name\n                    // SWITCH PURPLE COLORS INTO DATASETS OF OUTERS\n                    if (rotateBtn.id == 'Horizontal') {\n                        if (event.target.previousElementSibling  && event.target.previousElementSibling.dataset.row == event.target.dataset.row) event.target.previousElementSibling.style.background = 'purple'\n                        if (shipZone.children[g + 1] && shipZone.children[g + 1].dataset.row == event.target.dataset.row) shipZone.children[g + 1].style.background = 'purple'\n                        if (shipZone.children[g + 10]) shipZone.children[g + 10].style.background = 'purple'\n                        if (shipZone.children[g - 10]) shipZone.children[g - 10].style.background = 'purple'\n                        if (shipZone.children[g - 10] && shipZone.children[g - 10].previousElementSibling && shipZone.children[g - 10].previousElementSibling.dataset.row == event.target.dataset.row - 1) shipZone.children[g - 10].previousElementSibling.style.background = 'purple'\n                        if (shipZone.children[g - 10] && shipZone.children[g - 10].nextElementSibling.dataset.row == event.target.dataset.row - 1) shipZone.children[g - 10].nextElementSibling.style.background = 'purple'\n                        if (shipZone.children[g + 10] && shipZone.children[g + 10].previousElementSibling && shipZone.children[g + 10].previousElementSibling.dataset.row == Number(event.target.dataset.row) + 1) shipZone.children[g + 10].previousElementSibling.style.background = 'purple'\n                        if (shipZone.children[g + 10] && shipZone.children[g + 10].nextElementSibling && shipZone.children[g + 10].nextElementSibling.dataset.row == Number(event.target.dataset.row) + 1) shipZone.children[g + 10].nextElementSibling.style.background = 'purple'\n                    \n                    } else {\n                        if (shipZone.children[g + 10] ) shipZone.children[g + 10].style.background = 'purple'\n                        // if (shipZone.children[g + 1] && shipZone.children[g + 1].dataset.column ) shipZone.children[g + 1].style.background = 'purple'\n                        // // if (shipZone.children[g - 1] && shipZone.children[g + 1].dataset.column ) shipZone.children[g - 1].style.background = 'purple'\n                        if (shipZone.children[g + 11] && shipZone.children[g + 11].dataset.column != 0) shipZone.children[g + 11].style.background = 'purple'\n                        if (shipZone.children[g + 9] && shipZone.children[g + 9].dataset.column != 9) shipZone.children[g + 9].style.background = 'purple'\n                        // MAKE THE OUTERS APPEAR ON THE SAME LINE\n                        // if (shipZone.children[g - 10]) shipZone.children[g - 10].dataset.outer = 'Outer'\n                        if (shipZone.children[g - 10] && shipZone.children[g - 10].dataset.row == event.target.dataset.row - 1) shipZone.children[g - 10].style.background = 'purple'\n                        if (shipZone.children[g - 11] && shipZone.children[g - 11].dataset.column != 9) shipZone.children[g - 11].style.background = 'purple'\n                        if (shipZone.children[g - 9] && shipZone.children[g - 9].dataset.column != 0) shipZone.children[g - 9].style.background = 'purple'\n                        // console.log('PREV', shipZone.children[g - 9].dataset.column, shipZone.children[g + 9].dataset.column, event.target.dataset.column )\n                        \n                    }\n                    \n                } \n            }\n            shipBlocks.children[j].style.background = 'black'\n            \n        }\n    }\n    \n    if (rotateBtn.id == 'Horizontal') {\n        \n        if (shipArray[0].name == 'Carrier') {\n            shipBlocks.removeChild(shipBlocks.lastElementChild);\n            shipBlocks.style.gridTemplateColumns = `repeat(4, 1fr)`\n            shipBlocks.style.width = (shipBlocks.offsetWidth - 40) + 'px'\n        } else if (shipArray[0].name == 'Battle Ship') {\n            shipBlocks.removeChild(shipBlocks.lastElementChild);\n            shipBlocks.style.gridTemplateColumns = `repeat(3, 1fr)`\n            shipBlocks.style.width = (shipBlocks.offsetWidth - 40) + 'px'\n        } else if (shipArray[0].name == 'Submarine') {\n            shipBlocks.removeChild(shipBlocks.lastElementChild);\n            shipBlocks.style.gridTemplateColumns = `repeat(2, 1fr)`\n            shipBlocks.style.width = (shipBlocks.offsetWidth - 40) + 'px'\n        } else if (shipArray[0].name == 'Patrol Boat') {\n            document.querySelector('.contain-ships').style.display = 'none'\n            document.querySelector('.contain').style.filter = 'none'\n            document.querySelector('header').style.filter = 'none'\n            document.querySelector('.overlay').querySelector('p').innerText = 'Carrier'\n        }\n    } else {\n        if (shipArray[0].name == 'Carrier') {\n            shipBlocks.removeChild(shipBlocks.lastElementChild);\n            shipBlocks.style.gridTemplateRows = `repeat(4, 1fr)`\n            shipBlocks.style.height = (shipBlocks.offsetHeight - 37) + 'px'\n\n        } else if (shipArray[0].name == 'Battle Ship') {\n            shipBlocks.removeChild(shipBlocks.lastElementChild);\n            shipBlocks.style.gridTemplateRows = `repeat(3, 1fr)`\n            shipBlocks.style.height = (shipBlocks.offsetHeight - 37) + 'px'\n        } else if (shipArray[0].name == 'Submarine') {\n            shipBlocks.removeChild(shipBlocks.lastElementChild);\n            shipBlocks.style.gridTemplateRows = `repeat(2, 1fr)`\n            shipBlocks.style.height = (shipBlocks.offsetHeight - 37) + 'px'\n        } else if (shipArray[0].name == 'Patrol Boat') {\n            document.querySelector('.contain-ships').style.display = 'none'\n            document.querySelector('.contain').style.filter = 'none'\n            document.querySelector('header').style.filter = 'none'\n            document.querySelector('.overlay').querySelector('p').innerText = 'Carrier'\n        }\n    }\n    shipCopy.push(shipArray[0])\n    console.log('COPY', shipCopy, shipArray)\n    shipArray.splice(0, 1)\n    if (shipArray[0]) document.querySelector('p').innerText = shipArray[0].name\n}\n\nconst getGridPosition = (parent, index) => {\n    let offset = Number(window.getComputedStyle(parent.children[0]).gridColumnStart) - 1;\n\n    if (isNaN(offset)) offset = 0;\n\n    const colCount = window.getComputedStyle(parent).gridTemplateColumns.split(' ').length;\n    const rowPosition = Math.floor((index + offset) / colCount);\n    const colPosition = (index + offset) % colCount;\n        \n    return { row: rowPosition, column: colPosition }\n}\n\nconst getElementIndex = (element) => {\n    const findElement = element.parentNode.children;\n\n    for (let i = 0; i < findElement.length; i++) if (findElement[i] === element) return i\n}\n\nconst hoverGridCell = (event) => {\n    event.target.style.background = '#3232';\n\n    const logPositions = getGridPosition(enemyWaters, getElementIndex(event.target))\n\n    // USE getShipPositions to find the receivedattacks coordinates\n\n    // console.log('Find it - enemyWaters', logPositions ) // USE THIS AND GET POSITION FOR CLICKS\n\n    // console.log('Random allyWaters', getGridPosition(allyWaters, Math.floor(Math.random() * allyWaters.childElementCount)) )\n    \n    \n    // console.log('Find ally coords', allyWaters.children[Math.floor(Math.random() * allyWaters.childElementCount)] )\n    \n    // ABOVE WORKS, NOW FIND A WAY TO MAKE IT NOT COORDINATE TWICE\n}\n\nconst clickGridCell = (event) => {\n    const enemyBoardCoordinates = getGridPosition(enemyWaters, getElementIndex(event.target));\n   \n    player.attackPlayer('Human', [enemyBoardCoordinates.row, enemyBoardCoordinates.column])\n    // player.attackPlayer('Computer', [allyBoardCoordinates.row, allyBoardCoordinates.column])\n    randomSelectionCheck()\n    // player.attackPlayer('Computer', [allyBoardCoordinates.row, allyBoardCoordinates.column])\n    // console.log('LOOK COMPUTER ATTACK ALLY BOARD', player.human.board, player.human.shipAttacks, player.human.missedBlasts)\n\n    \n    console.log('CHECK ARRAY', player.human.board, player.computer.board)\n    \n    console.log('SHIPPY', player.human.shipAttacks, player.computer.shipAttacks)\n\n    if (event.target.dataset.ship) {\n        event.target.style.pointerEvents = 'none'\n        event.target.style.cursor = 'none'\n        event.target.style.background = 'red'\n    }\n    else {\n        event.target.innerHTML = `<i class=\"fas fa-circle\"></i>`\n        event.target.style.pointerEvents = 'none'\n        event.target.style.cursor = 'none'\n    }\n    if (player.human.checkShipConditions()) {\n        // alert('COMPUTER WON')\n        document.querySelector('.winner').innerText = 'COMPUTER WON'\n        document.querySelector('.restart').style.display = 'flex';\n    } else if (player.computer.checkShipConditions()) {\n        // alert('HUMAN WON')\n        document.querySelector('.winner').innerText = 'HUMAN WON'\n        document.querySelector('.restart').style.display = 'flex';\n    }\n        // console.log('AFTER', player.computer.board, player.human.board)\n        // console.log('WILLING', player.restartPlayers())\n        \n    \n    \n    // console.log('ENEMY', enemyBoardCoordinates) // USE TO ATTACK ENEMY\n    // console.log('ALLY', allyBoardCoordinates) // USE FOR COMPUTER TO ATTACK\n}\n\nconst restartBoard = event => {\n    clearBoard();\n\n    player.restartPlayers()\n    event.target.parentElement.style.display = '';\n    document.querySelector('.contain-ships').style.display = 'flex';\n    document.querySelector('.contain').style.filter ='blur(4px)';\n    shipArray = shipCopy.map(ship => ship);\n    shipBlocks.style.gridTemplateColumns = 'repeat(5, 1fr';\n    shipBlocks.style.width = '198px';\n    shipBlocks.children[1].style.borderRight = '1px solid silver';\n    shipCopy.splice(0, 5);\n    player.human.shipAttacks.length = 0;\n    player.human.missedBlasts.length = 0;\n    player.computer.shipAttacks.length = 0;\n    player.computer.missedBlasts.length = 0;\n   \n    firstChild = 2;\n    secondChild = 3\n\n    for (let i = 0; i < 3; i++) {\n        const createDiv = document.createElement('div');\n\n        shipBlocks.append(createDiv);\n        createDiv.classList.add('grid-styles')\n        createDiv.dataset.column\n        createDiv.dataset.row\n        createDiv.style.background = 'black'\n        if (i > 2) createDiv.style.borderRight = 'transparent'\n    }\n}\n\nconst clearBoard = () => {\n    for (let i = 0; i < enemyWaters.children.length; i++) {\n        enemyWaters.children[i].style.background = ''\n        delete enemyWaters.children[i].dataset.ship\n        delete enemyWaters.children[i].dataset.shot\n        enemyWaters.children[i].style.pointerEvents = 'auto'\n        enemyWaters.children[i].style.cursor = 'pointer'\n        if (enemyWaters.children[i].firstChild) enemyWaters.children[i].firstChild.remove()\n    }\n    for (let i = 0; i < allyWaters.children.length; i++) {\n        allyWaters.children[i].style.background = '';\n        delete allyWaters.children[i].dataset.ship;\n        allyWaters.children[i].dataset.shot = false\n        if (allyWaters.children[i].firstChild) allyWaters.children[i].firstChild.remove()\n    }\n    for (let i = 0; i < shipZone.children.length; i++) {\n        shipZone.children[i].style.background = ''\n        delete shipZone.children[i].dataset.ship\n        delete shipZone.children[i].dataset.outer\n    }\n    \n    array.length = 0;\n}\n\nconst randomSelectionCheck = () => { // ALLY TARGETS\n    const randomSelection = allyWaters.children[Math.floor(Math.random() * allyWaters.children.length)]\n       \n    if (array.indexOf(randomSelection.dataset.row + randomSelection.dataset.column) == -1 ) {\n        array.push(randomSelection.dataset.row + randomSelection.dataset.column)\n        randomSelection.dataset.shot = true;\n\n        for (let i = 0; i < allyWaters.children.length; i++) {\n            if (randomSelection.dataset.row == allyWaters.children[i].dataset.row && randomSelection.dataset.column == allyWaters.children[i].dataset.column\n            && randomSelection.dataset.ship) {\n                allyWaters.children[i].style.background = 'red'\n                player.attackPlayer('Computer', [randomSelection.dataset.row, randomSelection.dataset.column])\n                return\n            } else if (randomSelection.dataset.row == allyWaters.children[i].dataset.row && randomSelection.dataset.column == allyWaters.children[i].dataset.column\n            && !allyWaters.children[i].dataset.ship) {\n                player.attackPlayer('Computer', [randomSelection.dataset.row, randomSelection.dataset.column])\n                randomSelection.innerHTML = `<i class=\"fas fa-circle\"></i>`;\n                return\n            }\n        }\n\n        return \n    } else  {\n        randomSelectionCheck()\n\n        return \n    }\n}\n\nconst hoverOutGridCell = (event) => {\n    if (event.target.dataset.ship) return\n    else event.target.style.background = 'transparent'\n}\n\nwindow.addEventListener('load', loadGridBlocks)\n\nconsole.log(rice)\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (rice);\n\n//# sourceURL=webpack://battleship/./src/Functionality/Dom.js?");

/***/ }),

/***/ "./src/Functionality/GameBoard.js":
/*!****************************************!*\
  !*** ./src/Functionality/GameBoard.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Ship__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Ship */ \"./src/Functionality/Ship.js\");\n\n\nconst GameBoard = () => {\n    let newBoard = [\n        [0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9],\n        [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9],\n        [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9],\n        [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9],\n        [4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9],\n        [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [5, 9],\n        [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9],\n        [7, 0], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [7, 9],\n        [8, 0], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9],\n        [9, 0], [9, 1], [9, 2], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 8], [9, 9],\n    ]\n    \n    const missedBlasts = []\n    const shipAttacks = []\n    const board = [];\n    \n    (() => {\n        for (let row = 0; row < 10; row++) {\n            for (let col = 0; col < 10; col++) {\n                board.push([row, col])\n            }\n        }\n    })()\n    \n    const placeShips = (ship, length, coords, direction) => {\n        if (direction == 'Horizontal') placeHorizontal(ship, length, coords)\n        else placeVertical(ship, length, coords)\n\n        return board\n    }\n    \n    const placeComputerShips = (ship, length) => { // CHANGE THIS TO FOCUS ON COMPUTER SHIP\n        const direction = ['Horizonal', 'Vertical']\n        const randomView = Math.floor(Math.random() * direction.length)\n        const random = board[Math.floor(Math.random() * board.length)]\n\n        // if (direction[randomView] == 'Horizonal') {\n        //     for (let col = 0; col < board.length; col++) {  \n        //         for (let row = 0; row < length; row++) {\n        //                 if (random[1] > 5 ) {\n\n        //                     placeComputerShips(ship, length)\n        //                     return board\n        //                 } else if (!random[2] && ship == 'Carrier') random[2] = {name: ship, shot: false}\n        //                 if (random[1] > 6 && random[2] ) {\n\n        //                     placeComputerShips(ship, length)\n        //                     return board\n        //                 } else if (!random[2] && ship == 'Battle Ship') {\n                            \n        //                     random[2] = {name: ship, shot: false} \n        //                 } \n                        \n        //                 if (random[1] > 7 && random[2] ) {\n\n        //                     placeComputerShips(ship, length)\n        //                     return board\n        //                 } else if (!random[2] && ship == 'Destroyer') {\n        //                     random[2] = {name: ship, shot: false}\n        //                 } \n                          \n        //                 if (random[1] > 7 && random[2] ) {\n\n        //                     placeComputerShips(ship, length)\n        //                     return board\n        //                 } else if (!random[2] && ship == 'Submarine') {\n        //                     random[2] = {name: ship, shot: false} \n        //                 } \n                         \n        //                 if (random[1] > 8 && random[2] ) {\n\n        //                     placeComputerShips(ship, length)\n        //                     return board\n        //                 } else if (!random[2] && ship == 'Patrol Boat') {\n        //                     random[2] = {name: ship, shot: false}\n        //                 } \n                         \n                    \n        //             // if (board[col][1] == random[1] && board[col + row][0] == random[0]) {\n        //             //     board[col + row][2] = {name: ship, shot: false}   \n        //             // } \n        //         }\n        //     }\n        // } else {\n        //     for (let i = 0; i < board.length; i++) {\n        //         // if (!random[2] && ship !== undefined) {\n        //             if (random[0] > 5 ) {\n\n        //                 placeComputerShips(ship, length)\n        //                 return board\n        //             } else random[2] = {name: ship, shot: false}\n        //             if (random[0] > 6 && random[2] ) {\n\n        //                 placeComputerShips(ship, length)\n        //                 return board\n        //             } else if (!random[2] && ship == 'Battle Ship') {\n        //                 random[2] = {name: ship, shot: false}\n        //             } \n                     \n        //             if (random[0] > 7 && random[2] ) {\n\n        //                 placeComputerShips(ship, length)\n        //                 return board\n        //             } else if (!random[2] && ship == 'Destroyer') {\n        //                 random[2] = {name: ship, shot: false}\n        //             } \n                     \n        //             if (random[0] > 7 && random[2] ) {\n\n        //                 placeComputerShips(ship, length)\n        //                 return board\n        //             } else if (!random[2] && ship == 'Submarine') {\n        //                 random[2] = {name: ship, shot: false}\n        //             } \n                      \n        //             if (random[0] > 8 && random[2] ) {\n\n        //                 placeComputerShips(ship, length)\n        //                 return board\n        //             } else if (!random[2] && ship == 'Patrol Boat') {\n        //                 random[2] = {name: ship, shot: false} \n        //             } \n                    \n        //         // } // CHECK IF IT GOES INTO THE SAME POSITIONED SHIP PLACED\n        //         if ( board[i][0] == random[0] && board[i][1] == random[1] && ship !== undefined && board[i][2].name == 'Carrier') {\n        //             for (let k = 0; k < 4; k++) board[i += 10][2] = {name: ship, shot: false}\n        //         }  if ( board[i][0] == random[0] && board[i][1] == random[1] && ship !== undefined && board[i][2].name == 'Battle Ship') {\n        //             for (let k = 0; k < 3; k++) board[i += 10][2] = {name: ship, shot: false}\n        //         }  if ( board[i][0] == random[0] && board[i][1] == random[1] && ship !== undefined && board[i][2].name == 'Destroyer') {\n        //             for (let k = 0; k < 2; k++) board[i += 10][2] = {name: ship, shot: false}\n        //         }  if ( board[i][0] == random[0] && board[i][1] == random[1] && ship !== undefined && board[i][2].name == 'Submarine') {\n        //             for (let k = 0; k < 2; k++) board[i += 10][2] = {name: ship, shot: false}\n        //         }  if ( board[i][0] == random[0] && board[i][1] == random[1] && ship !== undefined && board[i][2].name == 'Patrol Boat') {\n        //             for (let k = 0; k < 1; k++) board[i += 10][2] = {name: ship, shot: false}\n        //         }\n        //     }\n        // }\n        \n        return board\n    }\n    \n    const placeHorizontal = (ship, length, coords) => {\n        for (let row = 0; row < board.length; row++) {\n            for (let col = 0; col < length; col++) {\n                if (board[row][0] == coords[0] && board[row][1] == coords[1]\n                && board[row + col] && board[row + col][0] == coords[0]) {\n                    board[row + col][2] = {name: ship, shot: false}\n                }\n            }\n        }\n    }\n\n    const placeVertical = (ship, length, coords) => {\n        let row = coords[0];\n        let col = coords[1];\n    \n        for (let k = 0; k < board.length; k++) {\n            for (let p = 10; p < length * 10 ; p += 10) {\n                if (board[k][0] == row && board[k][1] == col && board[k + p]) {\n                    board[k][2] = {name: ship, shot: false} \n                    board[k + p][2] = {name: ship, shot: false}\n                    \n                    // if (board[k][2].name == 'Carrier') {\n                    //     for (let i = 0; i < 4; i++) board[k += 10][2] = {name: ship, shot: false}\n                    // } \n                    // if (board[k][2].name == 'Battle Ship') {\n                    //     for (let i = 0; i < 3; i++) board[k += 10][2] = {name: ship, shot: false}\n                    // } \n                    // if (board[k][2].name == 'Destroyer') {\n                    //     for(let i = 0; i < 2; i++) board[k += 10][2] = {name: ship, shot: false}\n                    // } \n                    // if (board[k][2].name == 'Submarine') {\n                    //     for(let i = 0; i < 2; i++) board[k += 10][2] = {name: ship, shot: false}\n                    // } \n                    // if (board[k][2].name == 'Patrol Boat') {\n                    //     for(let i = 0; i < 1; i++) board[k += 10][2] = {name: ship, shot: false}\n                    // } \n                }\n            }\n        }\n    }\n\n    const receiveAttack = (coordinates) => {\n        for (let i = 0; board.length; i++) {\n            if (board[i][0] == coordinates[0] && board[i][1] == coordinates[1]) {\n                \n                if (board[i].length == 3) {\n                    if (board[i][2].shot == true) return 'ALREADY SHOT'\n                    if (board[i][2].name) {\n                        board[i][2].shot = true\n                        shipAttacks.push(board[i])\n                    }\n                    return shipAttacks\n                } else if (board[i].length == 2) return missedAttacks(coordinates)\n            } \n            // else missedAttacks(coordinates)\n            \n        }\n        // return shipAttacks\n    }\n\n    const missedAttacks = missedShots => {\n        missedShots[2] = { missed: true }\n        missedBlasts.push(missedShots)\n        \n        return missedBlasts\n    }\n\n    const checkShipConditions = () => {\n        if (shipAttacks.length == 17 && shipAttacks.every(ship => ship[2].name && ship[2].shot == true)) return true\n        else return false\n        // return shipAttacks.every(ship => {\n        //     if (shipAttacks.length == 17 && ship[2].shot == true) {\n        //         return 'FOOD'\n        //     } \n        // })\n        \n    }\n\n    return { \n        receiveAttack, \n        missedAttacks, \n        checkShipConditions, \n        board, placeShips, \n        placeComputerShips,\n        placeHorizontal,\n        placeVertical,\n        shipAttacks,\n        missedBlasts\n    }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GameBoard);\n\n//# sourceURL=webpack://battleship/./src/Functionality/GameBoard.js?");

/***/ }),

/***/ "./src/Functionality/Player.js":
/*!*************************************!*\
  !*** ./src/Functionality/Player.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _GameBoard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GameBoard */ \"./src/Functionality/GameBoard.js\");\n\n\nconst Player = () => {\n    const human = (0,_GameBoard__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n    const computer = (0,_GameBoard__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n    \n    const attackPlayer = (player, coordinates) => {\n        if (player == 'Human') return computer.receiveAttack(coordinates);\n        else return human.receiveAttack(coordinates)\n    }\n    \n    const restartPlayers = (player) => {\n        let clearPlayerBoard = human.board;\n        let clearComputerBoard = computer.board;\n\n        \n        // clearPlayerBoard = GameBoard().board\n        for (let i = 0; i < clearPlayerBoard.length; i++) {\n            if (clearPlayerBoard[i].length == 3) clearPlayerBoard[i].splice(2, 1)\n        }\n        \n        \n    \n    \n        // clearComputerBoard = GameBoard().board\n        for (let i = 0; i < clearComputerBoard.length; i++) {\n            if (clearComputerBoard[i].length == 3) clearComputerBoard[i].splice(2, 1)\n        }\n            \n        \n        return [clearPlayerBoard, clearComputerBoard]\n    }\n            \n    return { attackPlayer, human, computer, restartPlayers }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Player);\n\n//# sourceURL=webpack://battleship/./src/Functionality/Player.js?");

/***/ }),

/***/ "./src/Functionality/Ship.js":
/*!***********************************!*\
  !*** ./src/Functionality/Ship.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst CreateShips = () => {\n    const hitCoordinates = [];\n\n    const hit = num => {\n        if (hitCoordinates.indexOf(num) == -1) {\n            hitCoordinates.push(num)\n            \n            return hitCoordinates\n        } \n    }\n\n    const isSunk = (length) => {\n        if (hitCoordinates.length == length) {\n            hitCoordinates[2].sunk = true\n\n            return true\n        } else return false\n    }\n\n    return { hit, isSunk }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CreateShips);\n\n//# sourceURL=webpack://battleship/./src/Functionality/Ship.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Functionality_Dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Functionality/Dom */ \"./src/Functionality/Dom.js\");\n\n\nconsole.log('Food', _Functionality_Dom__WEBPACK_IMPORTED_MODULE_0__[\"default\"])\n\n\n//# sourceURL=webpack://battleship/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;