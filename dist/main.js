/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Functionality/Dom.js":
/*!**********************************!*\
  !*** ./src/Functionality/Dom.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _GameBoard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GameBoard */ \"./src/Functionality/GameBoard.js\");\n/* harmony import */ var _Player__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Player */ \"./src/Functionality/Player.js\");\n/* harmony import */ var _Ship__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Ship */ \"./src/Functionality/Ship.js\");\n\n\n\n\nconst rice = 'Mans'\nconst enemyWaters = document.querySelector('.enemy-waters');\nconst allyWaters = document.querySelector('.allied-waters');\nconst shipZone = document.querySelector('.ship-zone');\nconst shipBlocks = document.querySelector('.ship-block');\nconst getShipPositions = (0,_GameBoard__WEBPACK_IMPORTED_MODULE_0__[\"default\"])()\nconst getPlayerType = (0,_Player__WEBPACK_IMPORTED_MODULE_1__[\"default\"])()\n\nconst shipLengths = [5, 4, 3, 3, 2]\nconst array = [];\nlet hoverMagnet = false\nconst shipArray = [\n    {name: 'Carrier', length: 5},\n    {name: 'Battle Ship', length: 4},\n    {name: 'Destroyer', length: 3},\n    {name: 'Submarine', length: 3},\n    {name: 'Patrol Boat', length: 2}\n]\n\nconst loadGridBlocks = () => { // WORK ON GETTING COORDINATES\n    for (let i = 0; i < 100; i++) {\n        const enemyDivs = document.createElement('div');\n        const allyDivs = document.createElement('div');\n        const shipDivs = document.createElement('div');\n\n        enemyDivs.classList.add('grid-cell')\n        enemyDivs.classList.add('grid-enemy')\n\n        enemyDivs.addEventListener('mouseover', hoverGridCell)\n        enemyDivs.addEventListener('click', clickGridCell)\n        enemyDivs.addEventListener('mouseout', hoverOutGridCell)\n        shipDivs.addEventListener('mouseover', hoverShipPlacements)\n        shipDivs.addEventListener('mouseout', hoverOutShipPlacements)\n        shipDivs.addEventListener('click', clickShipPlacement);\n        \n        enemyWaters.append(enemyDivs)\n        allyDivs.classList.add('grid-ally');\n        allyWaters.append(allyDivs);\n        enemyDivs.style.cursor = 'pointer'\n        shipZone.append(shipDivs)\n        shipDivs.classList.add('grid-ships')\n        shipBlocks.style.visibility = 'unset'\n        shipZone.append(shipBlocks)\n\n        enemyDivs.dataset.row = Number(getGridPosition(enemyWaters, getElementIndex(enemyDivs)).row);\n        enemyDivs.dataset.column = Number(getGridPosition(enemyWaters, getElementIndex(enemyDivs)).column);\n        allyDivs.dataset.row = Number(getGridPosition(allyWaters, getElementIndex(allyDivs)).row);\n        allyDivs.dataset.column = Number(getGridPosition(allyWaters, getElementIndex(allyDivs)).column);\n        shipDivs.dataset.row = Number(getGridPosition(shipZone, getElementIndex(shipDivs)).row);\n        shipDivs.dataset.column = Number(getGridPosition(shipZone, getElementIndex(shipDivs)).column);\n        allyDivs.dataset.shot = false;\n    }\n}\n\nconst hoverShipPlacements = event => {\n    let nextInnerGridCell = event.target.nextElementSibling\n    let upper = 0;\n\n    shipBlocks.style.display = 'grid'\n    shipBlocks.style.left = (event.target.offsetLeft) + 'px'\n    shipBlocks.style.top = (event.target.offsetTop) + 'px'\n    shipBlocks.lastElementChild.style.borderRight = 'transparent'\n    \n    for (let i = 0; i < shipBlocks.children.length; i++) {\n        for (let k = 0; k < shipZone.children.length; k++) {\n            while (upper != shipLengths[0] && nextInnerGridCell) { // CHANGE THIS TO A UNIVERSAL SHIP LENGTH\n                if (shipBlocks.children[upper] && event.target.dataset.row == nextInnerGridCell.dataset.row ) shipBlocks.children[upper].dataset.column = nextInnerGridCell.dataset.column - 1 \n                else if (nextInnerGridCell.dataset.column == 0) shipBlocks.lastElementChild.dataset.column = 9;\n                \n                // if (shipBlocks.children.length > 3) {\n                //     shipBlocks.children[upper].dataset.antiMagnet = nextInnerGridCell.dataset.antiMagnet\n                //     shipBlocks.lastElementChild.dataset.antiMagnet = 'undefined'\n                // }\n                // else {\n                //     shipBlocks.lastElementChild.dataset.antiMagnet = event.target.nextElementSibling.dataset.antiMagnet\n                //     hoverMagnet = false\n                // }\n                \n                // if (!shipBlocks.children[upper].dataset.antiMagnet || shipBlocks.children[upper].dataset.antiMagnet == 'undefined' || !event.target.dataset.antiMagnet ){\n                //     hoverMagnet = false\n                // }\n\n                upper++\n                nextInnerGridCell = nextInnerGridCell.nextElementSibling\n            }\n        }\n        if (!shipBlocks.children[i].dataset.row) shipBlocks.children[i].dataset.row = event.target.dataset.row\n        else shipBlocks.children[i].dataset.row = event.target.dataset.row\n        if (shipBlocks.children[0].dataset.column && event.target.dataset.row == shipBlocks.children[i].dataset.row) shipBlocks.children[0].dataset.column = event.target.dataset.column\n    }\n}\n\nconst hoverOutShipPlacements = event => {\n    shipBlocks.style.display = 'none'\n\n    for (let i = 0; i < shipBlocks.children.length; i++) {\n        if (event.target.dataset.column !== -1) {\n\n        }\n        else return\n    }\n}\n\n// ship.placeShips('Carrier', 5, [1, 2], 'Vertical') // EXAMPLE TO PLACE SHIP\nconst playerShips = (0,_GameBoard__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\nconst computerShips = (0,_GameBoard__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\nconst computer = (0,_Player__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\nconst player = (0,_Player__WEBPACK_IMPORTED_MODULE_1__[\"default\"])()\n\nconst placeComputerShips = () => {\n    const direction = ['Horizontal', 'Vertical']\n    const randomView = Math.floor(Math.random() * direction.length)\n    const random = computerShips.board[Math.floor(Math.random() * computerShips.board.length)]\n\n    if (direction[0] == 'Horizontal') {\n        for (let i = 0; i < enemyWaters.children.length; i++) {\n            for (let col = 0; col < computerShips.board.length; col++) {\n                if (random[1] > 5 && shipArray[0].name == 'Carrier') {\n                    placeComputerShips()\n                    return computerShips.board\n                }                \n                for (let row = 0; row < shipArray[0].length; row++) {\n                    if (random[1] > 6 && shipArray[0].name == 'Battle Ship') {\n                        placeComputerShips()\n                        return computerShips.board\n                    } \n                    \n                    if (random[1] > 7 && shipArray[0].name == 'Destroyer') {\n                        placeComputerShips()\n                        return computerShips.board\n                    } \n                    \n                    if (random[1] > 7 && shipArray[0].name == 'Submarine') {\n                        placeComputerShips()\n                        return computerShips.board\n                    } \n                    \n                    if (random[1] > 8 && shipArray[0].name == 'Patrol Boat') {\n                        placeComputerShips()\n                        return computerShips.board\n                    }\n\n                    // if (enemyWaters.children[i].dataset.row == random[0] && enemyWaters.children[i].dataset.column == random[1] && enemyWaters.children[i].dataset.ship != shipArray[0].name) {\n                    //     placeComputerShips()\n                    //     return computerShips.board\n                    // }\n                \n                    if (enemyWaters.children[i].dataset.row == random[0] && enemyWaters.children[i].dataset.column == random[1]\n                    && random[2]) {\n                        enemyWaters.children[i + row].style.background = 'red'\n                        enemyWaters.children[i + row].dataset.ship = shipArray[0].name\n                    }\n                }\n                computerShips.placeHorizontal(shipArray[0].name, shipArray[0].length, [random[0], random[1]])\n                // for (let row = 0; row < shipArray[0].length; row++) {\n                    \n                //     if (random[1] > 5) {\n                //         placeComputerShips()\n                //         return computerShips.board\n                //     }                \n                    \n                //     if (random[1] > 6 && random[2] ) {\n                //         placeComputerShips()\n                //         return computerShips.board\n                //     } \n                    \n                //     if (random[1] > 7 && random[2] ) {\n                //         placeComputerShips()\n                //         return computerShips.board\n                //     } \n                    \n                //     if (random[1] > 7 && random[2] ) {\n                //         placeComputerShips()\n                //         return computerShips.board\n                //     } \n                    \n                //     if (random[1] > 8 && random[2] ) {\n                //         placeComputerShips()\n                //         return computerShips.board\n                //     } \n                        \n                    \n                //     if (computerShips.board[col][1] == random[1] && computerShips.board[col + row][0] == random[0]) {\n                //         computerShips.board[col + row][2] = {name: shipArray[0].name, shot: false}   \n                //         if (enemyWaters.children[i].dataset.row == random[0] && enemyWaters.children[i].dataset.column == random[1]\n                //         && random[2]) {\n                //             enemyWaters.children[i + row].style.background = 'red'\n                //         }\n                //     }\n                // } \n                 \n            }\n        }\n        \n    } else {\n\n    }\n    return computerShips.board\n}\nconst clickShipPlacement = event => {\n    \n    playerShips.placeShips(shipArray[0].name, shipArray[0].length, [event.target.dataset.row, event.target.dataset.column], 'Horizontal')\n    \n    \n    for (let i = 0; i < allyWaters.children.length; i++) {\n        for (let j = 0; j < shipBlocks.children.length; j++) {\n            for (let k = 0; k < playerShips.board.length; k++) {\n                // if (playerShips.board[k])\n                if (allyWaters.children[i].dataset.row == shipBlocks.children[j].dataset.row \n                && allyWaters.children[i].dataset.column == shipBlocks.children[j].dataset.column) {\n                    allyWaters.children[i].style.background = 'red'\n                }\n            }\n            for (let g = 0; g < shipZone.children.length; g++) {\n                if (shipBlocks.children[j].dataset.row == shipZone.children[g].dataset.row &&\n                    shipBlocks.children[j].dataset.column == shipZone.children[g].dataset.column)  {\n                    shipZone.children[g].style.background = 'red'\n                    \n                    // shipZone.children[g].dataset.ship = shipArray[0]\n                    // event.target.style.background = 'red'\n                    \n                }\n            }\n        }\n    }\n    console.log(computerShips.board, 'Test')\n    \n    // PUT COMPUTER SHIP PLACEMENT FUNCTION HERE\n    console.log('CHECK', placeComputerShips())\n    \n    if (shipArray[0].name == 'Carrier') {\n        shipBlocks.removeChild(shipBlocks.lastElementChild);\n        shipBlocks.style.gridTemplateColumns = `repeat(4, 1fr)`\n        shipBlocks.style.width = (shipBlocks.offsetWidth - 40)+ 'px'\n    } else if (shipArray[0].name == 'Battle Ship') {\n        shipBlocks.removeChild(shipBlocks.lastElementChild);\n        shipBlocks.style.gridTemplateColumns = `repeat(3, 1fr)`\n        shipBlocks.style.width = (shipBlocks.offsetWidth - 40)+ 'px'\n    } else if (shipArray[0].name == 'Submarine') {\n        shipBlocks.removeChild(shipBlocks.lastElementChild);\n        shipBlocks.style.gridTemplateColumns = `repeat(2, 1fr)`\n        shipBlocks.style.width = (shipBlocks.offsetWidth - 40)+ 'px'\n    }\n\n    if (shipArray[0].name == 'Patrol Boat') {\n        document.querySelector('.contain-ships').remove()\n        document.querySelector('.contain').style.filter = 'none'\n        document.querySelector('header').style.filter = 'none'\n    }\n    else shipArray.splice(0, 1)\n    \n\n\n    // let firstIndex = 2\n    // let secondIndex = 3\n    // let accurateRow;\n    // let testRow\n    // const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    // console.log('HOVER', hoverMagnet, firstIndex, secondIndex, shipBlocks.lastElementChild)\n\n    // hoverMagnet = false;\n    // if (shipBlocks.children[firstIndex].dataset.column < shipBlocks.children[secondIndex].dataset.column && event.target.style.background != 'red' \n    // && enemyWaters.children[Math.floor(Math.random() * enemyWaters.childElementCount)].style.background != 'red' \n    // && !event.target.dataset.antiMagnet && hoverMagnet == false && shipBlocks.children[secondIndex].dataset.antiMagnet == 'undefined') {\n    //     if (firstIndex !== 0) {\n    //         firstIndex--\n    //         secondIndex-- \n    //     } \n    //     console.log('EXECUTES')\n    //     placePlayerShips()\n        \n    // }\n    // else return\n    // // RECHECK THE CLICKS TO SEE IF IT WORKS\n    // for (let i = 0; i < shipZone.children.length; i++) {\n        \n    //     for(let k = 0; k < shipBlocks.children.length; k++) {\n    //         let row = shipBlocks.children[k].dataset.row\n    //         let highRow = shipZone.children[i].dataset.row\n            \n    //         testRow = Number(row)\n    //         accurateRow = Number(highRow) + 1\n    //         if (shipZone.children[i].style.background !== 'red'  && shipZone.children[i].dataset.column == shipBlocks.children[k].dataset.column\n    //         && shipZone.children[i].dataset.row == numbers.indexOf(testRow) + 1 // TRY INDEXOF\n    //         && shipZone.children[i].nextElementSibling && shipZone.children[i].previousElementSibling\n    //         && shipZone.children[i].nextElementSibling.dataset.row == shipZone.children[i].dataset.row\n    //         && shipZone.children[i].previousElementSibling.dataset.row == shipZone.children[i].dataset.row) {\n    //             console.log('COLORS', shipZone.children[i], testRow, accurateRow, 'Next Sib', shipZone.children[i].nextElementSibling, 'Prev Sib', shipZone.children[i].previousElementSibling)\n    //             shipZone.children[i].dataset.antiMagnet = true;\n    //             shipZone.children[i].nextElementSibling.dataset.antiMagnet = true;\n    //             shipZone.children[i].previousElementSibling.dataset.antiMagnet = true;\n    //         }\n\n    //         if (shipZone.children[i].style.background !== 'red'  && shipZone.children[i].dataset.column == shipBlocks.children[k].dataset.column\n    //         && shipZone.children[i].dataset.row == numbers.indexOf(testRow) - 1 // TRY INDEXOF\n    //         && shipZone.children[i].nextElementSibling && shipZone.children[i].previousElementSibling\n    //         && shipZone.children[i].nextElementSibling.dataset.row == shipZone.children[i].dataset.row\n    //         && shipZone.children[i].previousElementSibling.dataset.row == shipZone.children[i].dataset.row) {\n    //             console.log('BEFORE COLORS', shipZone.children[i])\n    //             shipZone.children[i].dataset.antiMagnet = true;\n    //             shipZone.children[i].nextElementSibling.dataset.antiMagnet = true;\n    //             shipZone.children[i].previousElementSibling.dataset.antiMagnet = true;\n    //         }\n\n    //         if (shipZone.children[i].nextElementSibling && shipZone.children[i].nextElementSibling.style.background != 'red'\n    //         && shipZone.children[i].dataset.row == testRow && shipZone.children[i].dataset.column == shipBlocks.children[k].dataset.column\n    //         && shipZone.children[i].nextElementSibling.dataset.row == shipZone.children[i].dataset.row) {\n    //             console.log('CHECK NEXT SIBLING', shipZone.children[i].nextElementSibling)\n    //             shipZone.children[i].nextElementSibling.dataset.antiMagnet = true\n    //         // TURN SIBLING CHECKER INTO A FUNCTION THAT RETURNS TRUE/FALSE IF NEAR OTHER SHIPS\n    //         } \n            \n    //         if (shipZone.children[i].previousElementSibling && shipZone.children[i].style.background != 'red' && shipZone.children[i].previousElementSibling.style.background != 'red'\n    //         && shipZone.children[i].dataset.row == testRow && shipZone.children[i].dataset.column == shipBlocks.children[k].dataset.column\n    //         && shipZone.children[i].previousElementSibling.dataset.row == shipZone.children[i].dataset.row) {\n    //             console.log('CHECK PREVIOUS SIBLING', shipZone.children[i].previousElementSibling)\n    //             shipZone.children[i].previousElementSibling.dataset.antiMagnet = true;\n    //         } \n    //     }\n    // }\n\n    \n    // TRY TO USE THE SHIP ZONES CURRENT POSITION\n\n    // for (let i = 0; i < allyWaters.children.length; i++) {\n    //     for (let j = 0; j < shipBlocks.children.length; j++) {\n    //         if (shipBlocks.children[0].dataset.row == allyWaters.children[i].dataset.row\n    //         && allyWaters.children[i].dataset.column == shipBlocks.children[j].dataset.column) {\n    //             allyWaters.children[i].style.background = 'red'\n    //             allyWaters.children[i].dataset.ship = shipArray[0];\n    //             event.target.style.background = 'red'\n    //         }\n\n    //         for (let k = 0; k < shipZone.children.length; k++) {\n    //             if (shipBlocks.children[0].dataset.row == shipZone.children[k].dataset.row &&\n    //             shipBlocks.children[j].dataset.column == shipZone.children[k].dataset.column)  {\n    //                 shipZone.children[k].style.background = 'red'\n    //                 shipZone.children[k].dataset.ship = shipArray[0]\n    //             }\n    //         }\n    //     }\n    // }\n\n    \n    // if (shipArray[0] == carrier.shipName) {\n    //     shipBlocks.removeChild(shipBlocks.lastElementChild);\n    //     shipBlocks.style.gridTemplateColumns = `repeat(4, 1fr)`\n    //     shipBlocks.style.width = (shipBlocks.offsetWidth - 40)+ 'px'\n    // } else if (shipArray[0] == battleShip.shipName) {\n    //     shipBlocks.removeChild(shipBlocks.lastElementChild);\n    //     shipBlocks.style.gridTemplateColumns = `repeat(3, 1fr)`\n    // } else if (shipArray[0] == submarine.shipName) shipBlocks.removeChild(shipBlocks.lastElementChild);\n    \n    // if (shipArray.length !== 1 && shipLengths.length !== 1) {\n    //     shipArray.splice(0, 1)\n    //     shipLengths.splice(0, 1)\n    // }\n    // else {\n    //     document.querySelector('.contain').style.filter = 'none'\n    //     document.querySelector('header').style.filter = 'none'\n    //     document.querySelector('.contain-ships').remove();\n    // }\n}\n\n// const placePlayerShips = () => {\n//     switch (shipArray[0]) {\n//         case carrier.shipName:\n//             console.log('Carrier works');\n//             createComputerShips(carrier.length - 1)\n\n//             break;\n//         case battleShip.shipName:\n//             console.log('Battleship works');\n//             shipBlocks.style.width = (shipBlocks.offsetWidth - 40)+ 'px'\n//             createComputerShips(battleShip.length - 1)\n\n//             break;\n//         case destroyer.shipName:\n//             console.log('Destroyer works');\n//             shipBlocks.style.gridTemplateColumns = `repeat(3, 1fr)`\n//             createComputerShips(destroyer.length - 1)\n\n//             break;\n//         case submarine.shipName:\n//             console.log('Submarine works');\n//             shipBlocks.style.width = (shipBlocks.offsetWidth - 40)+ 'px'\n//             shipBlocks.style.gridTemplateColumns = `repeat(2, 1fr)`\n//             createComputerShips(submarine.length - 1)\n\n//             break;\n//         case patrolBoat.shipName:\n//             console.log('Patrol Boat');\n            \n//             createComputerShips(patrolBoat.length - 1)\n\n//             break;\n//     }\n// }\n\nconst createComputerShips = (shipInfo) => {\n    const randomPlacement = Math.floor(Math.random() * enemyWaters.childElementCount);\n    let previousGrid = enemyWaters.children[randomPlacement].previousElementSibling\n    let nextGrid = enemyWaters.children[randomPlacement].nextElementSibling\n    let j = 0;\n    let shipLength = 0;\n    let testRow;\n    const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n    let row = enemyWaters.children[randomPlacement].dataset.row\n\n    testRow = Number(row)\n    \n    \n    \n    if (enemyWaters.children[randomPlacement].style.background != 'red' &&  Number(enemyWaters.children[randomPlacement].dataset.column) + shipInfo + 1 <= 10\n    && enemyWaters.children[randomPlacement].dataset.ship != shipArray[0]\n    && !enemyWaters.children[randomPlacement].dataset.antiMagnet && !enemyWaters.children[randomPlacement].nextElementSibling.dataset.antiMagnet\n    ) {\n        \n        enemyWaters.children[randomPlacement].dataset.ship = shipArray[0];\n        enemyWaters.children[randomPlacement].style.background = 'red'\n        enemyWaters.children[randomPlacement].dataset.antiMagnet = 'true'\n        console.log('DID IT ADD?', enemyWaters.children[randomPlacement])\n    } else {\n        console.log('First Else Find array', shipArray, enemyWaters.children[randomPlacement])\n        createComputerShips(shipInfo)\n        \n        return\n    }\n\n    let p = 0;\n    let k = 0;\n\n\n    for (let i = 0; i < enemyWaters.children.length; i++) {\n        let nextRandom = enemyWaters.children[i].nextElementSibling\n        let random = enemyWaters.children[i].nextElementSibling\n        let previousRandom = enemyWaters.children[i].previousElementSibling\n        let previous = enemyWaters.children[i].previousElementSibling\n\n        \n        while (j != shipInfo && nextGrid && previousGrid ) {\n            console.log('MINI', enemyWaters.children[randomPlacement], nextGrid, nextGrid.nextElementSibling)\n\n            if (nextGrid.nextElementSibling && nextGrid.nextElementSibling.style.background != 'red'\n            && enemyWaters.children[randomPlacement].dataset.row == nextGrid.nextElementSibling.dataset.row\n            ) {\n                console.log('PALE', nextGrid, nextGrid.nextElementSibling)\n                nextGrid.nextElementSibling.dataset.antiMagnet = 'true'\n                nextGrid.nextElementSibling.dataset.ship = shipArray[0]\n            } \n            \n            if (enemyWaters.children[randomPlacement].dataset.ship == shipArray[0] && enemyWaters.children[randomPlacement].dataset.row == nextGrid.dataset.row\n            && enemyWaters.children[randomPlacement].dataset.row == previousGrid.dataset.row\n            && enemyWaters.children[randomPlacement].dataset.ship == shipArray[0]\n            ) {\n                console.log('ENEMY CLONE', previousGrid, nextGrid, nextGrid.nextElementSibling)\n                nextGrid.style.background = 'red'                                                                             \n                nextGrid.dataset.antiMagnet = 'true'\n                previousGrid.dataset.antiMagnet = 'true';\n                nextGrid.dataset.ship = shipArray[0]\n                previousGrid.dataset.ship = shipArray[0]\n                \n                j++\n            } else {\n                console.log('ANGEL FAIL', enemyWaters.children[randomPlacement], nextGrid, shipArray)\n                enemyWaters.children[randomPlacement].style.background = 'transparent'\n                enemyWaters.children[randomPlacement].nextElementSibling.style.background = 'transparent'\n                nextGrid.style.background = 'transparent'\n                nextGrid.previousElementSibling.style.background = 'transparent'\n                nextGrid.nextElementSibling.style.background = 'transparent'\n                delete enemyWaters.children[randomPlacement].dataset.antiMagnet\n                delete enemyWaters.children[randomPlacement].dataset.ship\n                delete enemyWaters.children[randomPlacement].nextElementSibling.dataset.ship\n                delete enemyWaters.children[randomPlacement].nextElementSibling.dataset.antiMagnet\n                delete nextGrid.dataset.ship\n                delete nextGrid.previousElementSibling.dataset.antiMagnet\n                delete nextGrid.previousElementSibling.dataset.ship\n                delete nextGrid.dataset.antiMagnet\n                delete nextGrid.nextElementSibling.dataset.ship\n                delete nextGrid.nextElementSibling.dataset.antiMagnet\n\n                createComputerShips(shipInfo)\n                return\n            } \n            \n            nextGrid.dataset.ship = shipArray[0]\n            \n            if (nextGrid.nextElementSibling && enemyWaters.children[randomPlacement].dataset.row == nextGrid.nextElementSibling.dataset.row && nextGrid.nextElementSibling.dataset.ship != shipArray[0]) {\n                console.log('TITANIC', enemyWaters.children[randomPlacement], nextGrid, nextGrid.nextElementSibling, shipArray)\n                // THIS PREVENTS IT FROM APPEARING SIDE BY SIDE\n                \n                shipArray.unshift(shipArray[0]) // try removing this\n                enemyWaters.children[randomPlacement].style.background = 'transparent';\n                delete enemyWaters.children[randomPlacement].dataset.ship\n                delete enemyWaters.children[randomPlacement].dataset.antiMagnet\n                enemyWaters.children[randomPlacement].nextElementSibling.style.background = 'transparent'\n                delete enemyWaters.children[randomPlacement].nextElementSibling.dataset.ship\n                delete enemyWaters.children[randomPlacement].nextElementSibling.dataset.antiMagnet\n                nextGrid.style.background = 'transparent';\n                // nextGrid.previousElementSibling.style.background = 'transparent'\n                // delete nextGrid.previousElementSibling.dataset.ship\n                // delete nextGrid.previousElementSibling.dataset.antiMagnet\n                delete nextGrid.dataset.ship\n                delete nextGrid.dataset.antiMagnet\n\n\n            }\n           \n\n            \n            nextGrid = nextGrid.nextElementSibling\n\n        }\n        \n\n        if (enemyWaters.children[randomPlacement].nextElementSibling.dataset.ship != shipArray[0]) {\n            console.log('KING MAN', enemyWaters.children[randomPlacement])\n            // CHECK IF THIS IS STILL NEEDED\n            enemyWaters.children[randomPlacement].style.background = 'transparent'\n            delete enemyWaters.children[randomPlacement].dataset.antiMagnet\n            delete enemyWaters.children[randomPlacement].dataset.ship\n            createComputerShips(shipInfo)\n            return\n            // THIS CHECKS TO SEE IF ONLY ONE BLOCK APPEARS\n        }\n\n        if (enemyWaters.children[i].style.background !== 'red' && enemyWaters.children[i].dataset.row == numbers.indexOf(testRow) + 1\n        && enemyWaters.children[i].dataset.column == enemyWaters.children[randomPlacement].dataset.column\n        && enemyWaters.children[i].dataset.row == random.dataset.row\n        && enemyWaters.children[i].dataset.row == previous.dataset.row\n        && random) {\n            console.log('CLONER', enemyWaters.children[i], enemyWaters.children[i].nextElementSibling, random)\n            \n            while (k != shipInfo && random && previous && random.nextElementSibling) {\n                console.log('UP', random, previous)\n                if (random.nextElementSibling.style.background == 'red') {\n                    console.log('EXPLODE UP', random, enemyWaters.children[i], enemyWaters.children[randomPlacement])\n                    \n                    let nextChildren = enemyWaters.children[randomPlacement].nextElementSibling\n                    while (nextChildren && nextChildren.dataset.ship == enemyWaters.children[randomPlacement].dataset.ship) {\n                        console.log('EXPLODE IS RED', enemyWaters.children[randomPlacement], enemyWaters.children[randomPlacement].nextElementSibling, nextChildren)\n                        \n                        nextChildren.style.background = 'transparent'\n                        delete nextChildren.dataset.antiMagnet\n                        delete nextChildren.dataset.ship\n                        \n\n                        if (!nextChildren) createComputerShips(shipInfo)\n\n                        nextChildren = nextChildren.nextElementSibling\n                    }\n                } else {\n                    random.dataset.antiMagnet = 'true';\n                    random.previousElementSibling.dataset.antiMagnet = 'true';\n                    random.nextElementSibling.dataset.antiMagnet = 'true';\n                    previous.dataset.antiMagnet = 'true';\n                    random.dataset.ship = shipArray[0]\n                    previous.dataset.ship = shipArray[0]\n                    random.previousElementSibling.dataset.ship = shipArray[0]\n                    random.nextElementSibling.dataset.ship = shipArray[0]\n                }\n                \n                k++\n                random = random.nextElementSibling\n            }\n        } \n        \n        if (enemyWaters.children[i].style.background !== 'red' && enemyWaters.children[i].dataset.row == numbers.indexOf(testRow) - 1 \n        && enemyWaters.children[i].dataset.column == enemyWaters.children[randomPlacement].dataset.column\n        && enemyWaters.children[i].dataset.row == nextRandom.dataset.row\n        && enemyWaters.children[i].dataset.row == previousRandom.dataset.row\n        && nextRandom) {\n            while (p != shipInfo && nextRandom && previousRandom) {\n                console.log('DOWN', nextRandom, previousRandom)\n                // FIX THE PATROL BOAT TO PREVENT IT FROM BEING PLACED DIAGONALLY\n                \n                if (nextRandom.nextElementSibling.style.background == 'red') {\n                    let nextChildren = enemyWaters.children[randomPlacement].nextElementSibling\n                    \n                    console.log('EXPLODE DOWN', nextRandom, enemyWaters.children[i], enemyWaters.children[randomPlacement], nextChildren)\n                    \n                    while (nextChildren && nextChildren.dataset.ship == enemyWaters.children[randomPlacement].dataset.ship) {\n                        console.log('EXPLODE IS RED', enemyWaters.children[randomPlacement], enemyWaters.children[randomPlacement].nextElementSibling, nextChildren)\n\n                        nextChildren.style.background = 'transparent'\n                        delete nextChildren.dataset.antiMagnet\n                        delete nextChildren.dataset.ship\n                        delete enemyWaters.children[randomPlacement].previousElementSibling.dataset.ship\n                        delete enemyWaters.children[randomPlacement].previousElementSibling.dataset.antiMagnet\n\n\n                        if (!nextChildren) createComputerShips(shipInfo)\n\n                        nextChildren = nextChildren.nextElementSibling\n                    }\n                } else {\n                    nextRandom.dataset.antiMagnet = 'true'\n                    nextRandom.previousElementSibling.dataset.antiMagnet = 'true';\n                    nextRandom.nextElementSibling.dataset.antiMagnet = 'true'\n                    previousRandom.dataset.antiMagnet = 'true';\n                    \n                    nextRandom.dataset.ship = shipArray[0]\n                    nextRandom.previousElementSibling.dataset.ship = shipArray[0]\n                    nextRandom.nextElementSibling.dataset.ship = shipArray[0]\n                    previousRandom.dataset.ship = shipArray[0]\n                }\n                \n                p++\n                nextRandom = nextRandom.nextElementSibling\n            }\n        } \n    }\n}\n\nconst getGridPosition = (parent, index) => {\n    let offset = Number(window.getComputedStyle(parent.children[0]).gridColumnStart) - 1;\n\n    if (isNaN(offset)) offset = 0;\n\n    const colCount = window.getComputedStyle(parent).gridTemplateColumns.split(' ').length;\n    const rowPosition = Math.floor((index + offset) / colCount);\n    const colPosition = (index + offset) % colCount;\n        \n    return { row: rowPosition, column: colPosition }\n}\n\nconst getElementIndex = (element) => {\n    const findElement = element.parentNode.children;\n       \n    for (let i = 0; i < findElement.length; i++) if (findElement[i] === element) return i\n}\n\nconst hoverGridCell = (event) => {\n    event.target.style.background = '#3232';\n\n    const logPositions = getGridPosition(enemyWaters, getElementIndex(event.target))\n\n    // USE getShipPositions to find the receivedattacks coordinates\n\n    console.log('Find it - enemyWaters', logPositions ) // USE THIS AND GET POSITION FOR CLICKS\n\n    console.log('Random allyWaters', getGridPosition(allyWaters, Math.floor(Math.random() * allyWaters.childElementCount)) )\n    \n    \n    console.log('Find ally coords', allyWaters.children[Math.floor(Math.random() * allyWaters.childElementCount)] )\n    \n    // ABOVE WORKS, NOW FIND A WAY TO MAKE IT NOT COORDINATE TWICE\n}\n\nconst clickGridCell = (event) => {\n    const random = computerShips.board[Math.floor(Math.random() * computerShips.board.length)]\n    const enemyBoardCoordinates = getGridPosition(enemyWaters, getElementIndex(event.target));\n    const allyBoardCoordinates = getGridPosition(allyWaters, getElementIndex(randomSelectionCheck([])));\n\n    event.target.innerHTML = `<i class=\"fas fa-circle\"></i>`\n    event.target.style.pointerEvents = 'none'\n    event.target.style.cursor = 'none'\n\n    // player.attackPlayer('Human', [enemyBoardCoordinates.row, enemyBoardCoordinates.column])\n    // computer.attackPlayer('Computer', [allyBoardCoordinates.row, allyBoardCoordinates.column])\n    \n    for (let i = 0; i < enemyWaters.children.length; i++) {\n        for (let k = 0; k < allyWaters.children.length; k++) {\n            if (event.target.dataset.row == enemyBoardCoordinates.row && event.target.dataset.column == enemyBoardCoordinates.column) {\n                event.target.style.background = 'yellow'\n                \n            } else if (allyWaters.children[k].dataset.row == allyBoardCoordinates.row && allyWaters.children[k].dataset.column == allyBoardCoordinates.column) {\n                allyWaters.children[k].style.background = 'purple'\n                console.log('NEW ENEMY', allyWaters.children[k])\n            }\n        }\n    }\n\n    console.log('ENEMY', enemyBoardCoordinates, enemyBoardCoordinates.row) // USE TO ATTACK ENEMY\n    console.log('ALLY', allyBoardCoordinates) // USE FOR COMPUTER TO ATTACK\n}\n\nconst randomSelectionCheck = (array) => { // ALLY TARGETS\n    const randomSelection = allyWaters.children[Math.floor(Math.random() * allyWaters.children.length)]\n\n    \n    randomSelection.innerHTML = `<i class=\"fas fa-circle\"></i>`\n    randomSelection.dataset.shot = true\n    array.push(randomSelection.dataset.row, randomSelection.dataset.column)\n    console.log('Array', randomSelection.childNodes[0], randomSelection.childNodes[0].className === `fas fa-circle`)\n    console.log(array)\n    return randomSelection\n    \n}\n\nconst hoverOutGridCell = (event) => event.target.style.background = 'transparent'\n\nwindow.addEventListener('load', loadGridBlocks)\n\n\nconsole.log(rice)\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (rice);\n\n//# sourceURL=webpack://battleship/./src/Functionality/Dom.js?");

/***/ }),

/***/ "./src/Functionality/GameBoard.js":
/*!****************************************!*\
  !*** ./src/Functionality/GameBoard.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Ship__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Ship */ \"./src/Functionality/Ship.js\");\n\n\nconst GameBoard = () => {\n    let newBoard = [\n        [0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9],\n        [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9],\n        [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9],\n        [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9],\n        [4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9],\n        [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [5, 9],\n        [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9],\n        [7, 0], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [7, 9],\n        [8, 0], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9],\n        [9, 0], [9, 1], [9, 2], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 8], [9, 9],\n    ]\n    \n    const missedBlasts = []\n    const shipAttacks = []\n    const board = [];\n    \n    (() => {\n        for (let row = 0; row < 10; row++) {\n            for (let col = 0; col < 10; col++) {\n                board.push([row, col])\n            }\n        }\n    })()\n    \n    const placeShips = (ship, length, coords, direction) => {\n        if (direction == 'Horizontal') placeHorizontal(ship, length, coords)\n        else placeVertical(ship, coords)\n\n        return board\n    }\n    \n    const placeComputerShips = (ship, length) => { // CHANGE THIS TO FOCUS ON COMPUTER SHIP\n        const direction = ['Horizonal', 'Vertical']\n        const randomView = Math.floor(Math.random() * direction.length)\n        const random = board[Math.floor(Math.random() * board.length)]\n\n        // if (direction[randomView] == 'Horizonal') {\n        //     for (let col = 0; col < board.length; col++) {  \n        //         for (let row = 0; row < length; row++) {\n        //                 if (random[1] > 5 ) {\n\n        //                     placeComputerShips(ship, length)\n        //                     return board\n        //                 } else if (!random[2] && ship == 'Carrier') random[2] = {name: ship, shot: false}\n        //                 if (random[1] > 6 && random[2] ) {\n\n        //                     placeComputerShips(ship, length)\n        //                     return board\n        //                 } else if (!random[2] && ship == 'Battle Ship') {\n                            \n        //                     random[2] = {name: ship, shot: false} \n        //                 } \n                        \n        //                 if (random[1] > 7 && random[2] ) {\n\n        //                     placeComputerShips(ship, length)\n        //                     return board\n        //                 } else if (!random[2] && ship == 'Destroyer') {\n        //                     random[2] = {name: ship, shot: false}\n        //                 } \n                          \n        //                 if (random[1] > 7 && random[2] ) {\n\n        //                     placeComputerShips(ship, length)\n        //                     return board\n        //                 } else if (!random[2] && ship == 'Submarine') {\n        //                     random[2] = {name: ship, shot: false} \n        //                 } \n                         \n        //                 if (random[1] > 8 && random[2] ) {\n\n        //                     placeComputerShips(ship, length)\n        //                     return board\n        //                 } else if (!random[2] && ship == 'Patrol Boat') {\n        //                     random[2] = {name: ship, shot: false}\n        //                 } \n                         \n                    \n        //             // if (board[col][1] == random[1] && board[col + row][0] == random[0]) {\n        //             //     board[col + row][2] = {name: ship, shot: false}   \n        //             // } \n        //         }\n        //     }\n        // } else {\n        //     for (let i = 0; i < board.length; i++) {\n        //         // if (!random[2] && ship !== undefined) {\n        //             if (random[0] > 5 ) {\n\n        //                 placeComputerShips(ship, length)\n        //                 return board\n        //             } else random[2] = {name: ship, shot: false}\n        //             if (random[0] > 6 && random[2] ) {\n\n        //                 placeComputerShips(ship, length)\n        //                 return board\n        //             } else if (!random[2] && ship == 'Battle Ship') {\n        //                 random[2] = {name: ship, shot: false}\n        //             } \n                     \n        //             if (random[0] > 7 && random[2] ) {\n\n        //                 placeComputerShips(ship, length)\n        //                 return board\n        //             } else if (!random[2] && ship == 'Destroyer') {\n        //                 random[2] = {name: ship, shot: false}\n        //             } \n                     \n        //             if (random[0] > 7 && random[2] ) {\n\n        //                 placeComputerShips(ship, length)\n        //                 return board\n        //             } else if (!random[2] && ship == 'Submarine') {\n        //                 random[2] = {name: ship, shot: false}\n        //             } \n                      \n        //             if (random[0] > 8 && random[2] ) {\n\n        //                 placeComputerShips(ship, length)\n        //                 return board\n        //             } else if (!random[2] && ship == 'Patrol Boat') {\n        //                 random[2] = {name: ship, shot: false} \n        //             } \n                    \n        //         // } // CHECK IF IT GOES INTO THE SAME POSITIONED SHIP PLACED\n        //         if ( board[i][0] == random[0] && board[i][1] == random[1] && ship !== undefined && board[i][2].name == 'Carrier') {\n        //             for (let k = 0; k < 4; k++) board[i += 10][2] = {name: ship, shot: false}\n        //         }  if ( board[i][0] == random[0] && board[i][1] == random[1] && ship !== undefined && board[i][2].name == 'Battle Ship') {\n        //             for (let k = 0; k < 3; k++) board[i += 10][2] = {name: ship, shot: false}\n        //         }  if ( board[i][0] == random[0] && board[i][1] == random[1] && ship !== undefined && board[i][2].name == 'Destroyer') {\n        //             for (let k = 0; k < 2; k++) board[i += 10][2] = {name: ship, shot: false}\n        //         }  if ( board[i][0] == random[0] && board[i][1] == random[1] && ship !== undefined && board[i][2].name == 'Submarine') {\n        //             for (let k = 0; k < 2; k++) board[i += 10][2] = {name: ship, shot: false}\n        //         }  if ( board[i][0] == random[0] && board[i][1] == random[1] && ship !== undefined && board[i][2].name == 'Patrol Boat') {\n        //             for (let k = 0; k < 1; k++) board[i += 10][2] = {name: ship, shot: false}\n        //         }\n        //     }\n        // }\n        \n        return board\n    }\n    \n    const placeHorizontal = (ship, length, coords) => {\n        for (let row = 0; row < board.length; row++) {\n            for (let col = 0; col < length; col++) {\n                if (board[row][0] == coords[0] && board[row][1] == coords[1]\n                && board[row + col][0] == coords[0]) {\n                    board[row + col][2] = {name: ship, shot: false}\n                }\n            }\n        }\n    }\n\n    const placeVertical = (ship, coords) => {\n        let row = coords[0];\n        let col = coords[1];\n    \n        for (let k = 0; k < board.length; k++) {   \n            if (board[k][0] == row && board[k][1] == col) {\n                board[k][2] = {name: ship, shot: false} \n                board[k += 10][2] = {name: ship, shot: false}\n\n                if (board[k][2].name == 'Carrier') {\n                    for (let i = 0; i < 3; i++) board[k += 10][2] = {name: ship, shot: false}\n                } else if (board[k][2].name == 'Battle Ship') {\n                    for (let i = 0; i < 2; i++) board[k += 10][2] = {name: ship, shot: false}\n                } else if (board[k][2].name == 'Destroyer') {\n                    for(let i = 0; i < 1; i++) board[k += 10][2] = {name: ship, shot: false}\n                } else if (board[k][2].name == 'Submarine') {\n                    for(let i = 0; i < 1; i++) board[k += 10][2] = {name: ship, shot: false}\n                } else return\n            }\n        }\n    }\n\n    const receiveAttack = (coordinates) => {\n        const hitShip = (0,_Ship__WEBPACK_IMPORTED_MODULE_0__[\"default\"])()\n\n        for (let i = 0; board.length; i++) {\n            if (board[i][0] === coordinates[0] && board[i][1] === coordinates[1]) {\n                if (board[i].length == 3 && board[i][2].shot !== true) board[i][2].shot = true\n                else if (board[i].length < 3) missedAttacks(coordinates)\n                else return 'ALREADY SHOT'\n\n                shipAttacks.push(board[i])\n                return hitShip.hit(coordinates)\n            }       \n        }\n    }\n\n    const missedAttacks = missedShots => {\n        missedShots[2] = { missed: true }\n        missedBlasts.push(missedShots)\n        \n        return missedBlasts\n    }\n\n    const checkShipConditions = () => {\n        return shipAttacks.every(ship => {\n            if (shipAttacks.length == 17 && ship[2].shot == true) {\n                return ship\n            } \n        })\n        \n    }\n\n    return { \n        receiveAttack, \n        missedAttacks, \n        checkShipConditions, \n        board, placeShips, \n        placeComputerShips,\n        placeHorizontal,\n        placeVertical\n    }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GameBoard);\n\n//# sourceURL=webpack://battleship/./src/Functionality/GameBoard.js?");

/***/ }),

/***/ "./src/Functionality/Player.js":
/*!*************************************!*\
  !*** ./src/Functionality/Player.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _GameBoard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GameBoard */ \"./src/Functionality/GameBoard.js\");\n\n\nconst Player = () => {\n    const human = (0,_GameBoard__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n    const computer = (0,_GameBoard__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n    \n    const attackPlayer = (player, coordinates) => {\n        const attackHuman = human.receiveAttack(coordinates);\n        const attackComputer = computer.receiveAttack(coordinates);\n\n        if (player == 'Human') return attackHuman\n        else return attackComputer\n    }\n    \n    const restartPlayers = (player) => {\n        let clearPlayerBoard = human.board;\n        let clearComputerBoard = computer.board;\n\n        if (player == 'Human') {\n            clearPlayerBoard = (0,_GameBoard__WEBPACK_IMPORTED_MODULE_0__[\"default\"])().board\n            return clearPlayerBoard\n        }\n        else {\n            clearComputerBoard = (0,_GameBoard__WEBPACK_IMPORTED_MODULE_0__[\"default\"])().board\n            return clearComputerBoard\n        }\n    }\n            \n    return { attackPlayer, human, computer, restartPlayers }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Player);\n\n//# sourceURL=webpack://battleship/./src/Functionality/Player.js?");

/***/ }),

/***/ "./src/Functionality/Ship.js":
/*!***********************************!*\
  !*** ./src/Functionality/Ship.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   \"ship\": () => (/* binding */ ship)\n/* harmony export */ });\nconst CreateShips = (shipName, length) => {\n    const hitCoordinates = [];\n    let sunk = false;\n\n    const hit = num => {\n        if (hitCoordinates.indexOf(num) == -1) {\n            hitCoordinates.push(num)\n            \n            return hitCoordinates\n        } \n    }\n\n    const isSunk = (length) => {\n        if (hitCoordinates.length == length) {\n            hitCoordinates[2].sunk = true\n\n            return sunk = true\n        } else return sunk = false\n    }\n\n    return { hit, isSunk }\n}\nconst ship = CreateShips('Carrier', 5, false);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CreateShips);\n\n\n//# sourceURL=webpack://battleship/./src/Functionality/Ship.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Functionality_Dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Functionality/Dom */ \"./src/Functionality/Dom.js\");\n\n\nconsole.log('Food', _Functionality_Dom__WEBPACK_IMPORTED_MODULE_0__[\"default\"])\n\n\n//# sourceURL=webpack://battleship/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;